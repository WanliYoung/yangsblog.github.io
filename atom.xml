<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangyy&#39;s Life</title>
  
  <subtitle>这里是杨万里的生活</subtitle>
  <link href="https://43.143.214.130/atom.xml" rel="self"/>
  
  <link href="https://43.143.214.130/"/>
  <updated>2023-01-01T11:06:33.566Z</updated>
  <id>https://43.143.214.130/</id>
  
  <author>
    <name>yangyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年终总结</title>
    <link href="https://43.143.214.130/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://43.143.214.130/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-31T14:59:45.000Z</published>
    <updated>2023-01-01T11:06:33.566Z</updated>
    
    <content type="html"><![CDATA[<p>提笔还是这么困难。我曾以为写年终总结时的灵感会像我回忆这一年做过什么一样，思如泉涌。年终总结这事儿，倒不是第一次做了。最早的年终总结应该还是给小刘写小作文的时候，热恋时候的我们，会在新年、除夕等等时候给对方写上一大段话，表达爱意、许下承诺什么的。这种习惯没有坚持太久，热恋期过了就不再坚持了，能坚持固然很好、不能坚持也不觉得遗憾。后来也许是大一吧，还会在朋友圈发九图年终总结什么的。现在大家都这么做，我反而不愿意这样做了。如果本着想让大家知道这一年过的怎么样的想法，那么也许你费尽心思地挑图片、码字，在年终总结的洪流当中，也不会真的有谁在意；如果本着对自己的一年做总结，又何必发在朋友圈里呢，看的人多了自然和自己独自反思不同。我只想自己回顾这一年，有什么辛酸苦辣，自己知道就好。若有缘的朋友在博客上看到我的年终总结，自然也是一件趣事。</p><p>这一年值得回忆的事情太多，就让我用记流水账的形式记录下来吧。</p><h4 id="一月"><a class="header-anchor" href="#一月">¶</a>一月</h4><p>我还记得去年的这时候已经开始考试周了，大概是12月底的那一周和1月初的那一周是考试周，中间两场考试的间隔是四天左右，为跨年空出了时间。记得考完中间最后一场，我就飞奔出校，坐上了刚通的地铁，去往市区。中午应该是在舅舅家吃了午饭。然后下午去找小刘了，在某个地下商场吃了火锅。晚上在清冷的市区漫无目的地逛着。当时错过了回去的末班地铁，只能选择打车回学校。当时又不舍得分别，于是两人商量着向着津南校区的方向散步，这样既可以散步又可以缩短车程节省车费，哈哈。很喜欢那一夜的感觉，天津市的夜晚，冷清、干冷得很舒服。还记得我向小刘分享了我当时特别喜欢的赵雷的《理想》。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p1.jpg" alt="image" style="zoom: 50%;"><p>还记得1.7考试周的最后一天我才考完。约了因为考试周复习饥渴已久的兄弟们，一考完试就马上离开学校，去了津门羊大爷，点了一桌子的肉，还去外面的小摊上买了烤冷面、烤鱿鱼，喝了一桌的啤酒。这似乎居然是今年最后一次和兄弟出学校吃肉喝酒。接着去了KTV唱歌。总体来看是非常美好的一夜。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p.jpg" alt="image" style="zoom:50%;"><p>不幸的是，第二天，奥密克容登录中国，没错，天津是第一站，就在津南。那可是我国第一次迎战奥密克容。所幸当时我已经离开学校不在津南了。还记得当时学校的同学们逃荒似的逃离学校，当时没有出租车的时候，甚至有同学走路到西青区打车。反正大家都很狼狈，我也很狼狈地提早买了机票回上海了。为此，小刘还和我生气了。不过所幸，我做了正确的决定。能平安回家就不错了。</p><p>回家之后就是难忘的14天集中隔离了。其实当时蛮期待的。想挑战一下独处14天，看看自己是不是能很好地客服孤独感。我想我是挑战成功了。实际上我很怀念那一段日子。虽然一个人在房间里呆了十几天，但是买了弹力带坚持健身，也在里面写完了期末作业，睡了很多…总之就是和自己相处的很顺利。唯一难受的就是那时候吃的单调，想吃炸鸡火锅都吃不了。但是我还是经常会想过那样的生活的哈哈。那时候身材管理非常成功。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p3.jpg" alt="image" style="zoom:50%;"><p>隔离出来就是一月底了，一月份似乎没什么值得回忆的了。</p><h4 id="二月份"><a class="header-anchor" href="#二月份">¶</a>二月份</h4><p>二月的第一天，去了欢乐谷。体验了绝顶雄风、谷木游龙、跳楼机等等。感觉玩的最多的就是各种各样的过山车。实际上过程中还是蛮怕的，但是非常刺激。一年玩一次还是不错的。记得跳楼机是最后玩的，已经怕的不敢玩了。全程都怕得要死。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p4.jpg" alt="image" style="zoom:50%;"><p>二月中旬回将乐去了。见到了一些可爱的小屁孩，家里过年的感觉真好。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p5.jpg" alt="image" style="zoom:50%;"><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p6.jpg" alt="image" style="zoom:50%;"><p>去年的二月份还去了三明，和高中的兄弟们约了一天。想来似乎也快一年没见了。和高中的兄弟们虽然联系不多，但是还是很怀念那时候的感情。我还是很期待什么时候跑男团能一起再去二中的操场上跑一个3km。一定会有的，我相信。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p7.jpg" alt="i" style="zoom:50%;"><p>接着就是开学了。不过没能顺利返校，还是上了快两周的网课。回学校之后就是漫无天日的封校生活了。没有尽头的核酸检测，根本就出不去的校门。</p><h4 id="三月份"><a class="header-anchor" href="#三月份">¶</a>三月份</h4><p>三月份应该是我第一次萌生了转专业的想法。也意味着我大半年焦虑的开始。不过也很幸运，焦虑和努力有了回报。我也最终在十月份得偿所愿。</p><p>三月份照惯例参加了队里的二月二龙抬头。我突破了自己，平板支撑时间突破到了二十一分钟，幸运地拿下了队里的第三名。坚持会有意义的。</p><p>（其实已经跨过了2022年，感觉要写不完了，赶赶进度，哈哈）</p><p>甚至到了3.18天津还下了一场大雪。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p8.jpg" style="zoom:50%;"><p>三月份已经开始感到大二下学期的push了。计组、数据库、算法导论、人工智能导论、软件安全、并行、计算方法。感觉是最累的一学期了（因为大三上转专业到软件了，往后的日子应该都不会有这么多作业和压力了）。</p><p>似乎也是这段时间，开始看东北往事那种抽象的乐子了。</p><h4 id="四月份"><a class="header-anchor" href="#四月份">¶</a>四月份</h4><p>四月份学期到了中间。</p><p>好吧，暂时停更了，今天不想写了。困了。。。。。。</p><p>------------------------------------------------------------------------------------手动分割线，我又回来了，在写完操作系统期末报告之后。1.1的中午，似乎也不算晚。</p><p>四月份，封校继续、抽检继续，大部分时候都是网课。这个时候我意识到了这学期是我提升排名的机会。因为之前不封校的时候，每到周末都会因为龙舟队的训练和聚餐而失去比较多的学习时间。在CS这么卷的专业，似乎显得比较奢侈。不过这么想倒不是说后悔什么的，只是当封校剥夺了我训练和玩乐的机会，那我就有更多的时间专心学习。上网课也去除了为了上课奔波的时间。总体来说除了不能出去玩略显遗憾，我还是非常享受那样的时光的。</p><p>四月份似乎也是上海疫情开始严重的时候。家里人在上海，老是担心他们感染了。在那时候看，感染新冠似乎还是一件非常可怕的事情，而在年底，我们却都感染过了。世殊事异啊。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p9.jpg" style="zoom:50%;"><p>校外的美与热闹，还是牵动着校内同学们的心，校园集市上开始一年中经典的骂学校、骂市教委的现象。好在封校的日子不算长，闹的不算激烈。</p><p>也是在四月份，我当时开始晚上吃水煮餐。倒不是说多自律，实在是吃学校其他的东西吃腻了，觉得水煮也很好吃。于是就开始吃水煮餐了。平均下来一餐16左右吧，如果我正常吃快餐应该是11/12这样，还是贵了一些。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p10.jpg" style="zoom:50%;"><p>因为疫情，没有比赛、没有健身房训练，队里状态松懈，好像开会还被老大骂了。记得这是当时被骂之后第一次训练。去了泰达之后，这样的氛围就渐渐离我远去了。</p><p>4.17是我的20岁生日，还记得喝完酒兄弟们给我买的小蛋糕和奇怪的蜡烛。一人一口把“生日蛋糕”吃完了。</p><p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p11.jpg" alt=""></p><h4 id="五月份"><a class="header-anchor" href="#五月份">¶</a>五月份</h4><p>当时嫌弃天气太热，脑子一热就去剃了个寸头，当时好像是3mm的推子吧。丑是真的丑，但是凉快是真的凉快。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p12.jpg" style="zoom:50%;"><p>云鹏在健身房训练的时候不小心把牙磕掉了一块，还好没有大碍。</p><p>也是在这个月底，大家被封得忍无可忍了，集市上大家的措辞越发激烈。感觉是有人在恶意渲染，推动一些运动。隔壁天大的学生居然在某个晚上集会了，一群人围在一起，大喊什么“打倒官僚主义、打倒资本主义”之类的，说实话感觉有点过了。不过学校倒是因此提前把学生遣返回家了。</p><p>因此五月底，在校的最后几天的主题就是送别。一方面云鹏和小明要去当兵了，一切顺利的话，在当时看来是没有机会再见了；另一方面是中华哥这个老大哥也毕业了。虽然最后云鹏和小明没走，但是这可能也是我们缘分未尽吧。也许是十五的月亮十六圆，我还要和云鹏作为配桨，为了队伍十六周年的荣誉奋斗呢！</p><p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p13.jpg" alt=""></p><p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p14.jpg" alt=""></p><p>当一切告别完毕，我就和小刘一块儿回家去了。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p15.jpg" style="zoom:33%;"><h4 id="六月份"><a class="header-anchor" href="#六月份">¶</a>六月份</h4><p>刚回家就去乡下的爷爷家隔离去了。前一两天爷爷奶奶去三明了，就我一个人住。还记得自己煮的蛋花汤面简直和屎一样哈哈。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p16.jpg" style="zoom:25%;"><p>十几天的居家隔离，应该是我第一次在爷爷家住这么久吧。他很高兴，给我煮各种好吃的。还去洋布买了一大盆羊肉，吃了好几天。</p><p>在乡下的日子不能运动十分难受，那时候开始跳刘耕宏健身操。感觉确实蛮有用的，不觉得累，但是心率很高，出汗很多，跳完效果也很好。只不过后来一直没有合适的场合再跳（还是觉得有些羞耻）。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p17.jpg" style="zoom: 25%;"><p>隔离十几天之后我就迫不及待地去将乐了。办了健身房的卡，开始规律的健身生活。</p><p>六月份的ddl不算太多，相比七八月份还是轻松不少的。</p><p>六月份的尾巴，去驾校报名学车了。之前放假老是在上海待一段时间在将乐待一段时间，都没有完整的时间来学车。这次机缘巧合，就想着把车给学完了。</p><p>六月份很特殊地线上拍了南开龙例行的毕业照。</p><p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p18.jpg" alt=""></p><p>六月份的蹲腿训练拍到了自己股四头肌最好的状态。后来膝盖受伤之后就逐渐退化了，唉。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p20.jpg" style="zoom: 25%;"><h4 id="七月份"><a class="header-anchor" href="#七月份">¶</a>七月份</h4><p>七月份就开始很忙了。暑期实训、还未忙完的ddl、学车，全都挤在一起了。不过这也是很值得我骄傲的一段时间。学期末的ddl都非常出色的完成了，暑期实训也算圆满结束了。学车嘛，倒是刚开始。</p><p>健身也没落下，那时候练的比较凶，一天无氧+有氧+腹肌训练，连着练了很长一段时间，也没有休息日。跑步也是3/5km和变速跑交叉，当时刚发现变速跑的快乐，也刚刚掌握跑步机的技巧，甚至跑姿也让自己十分满意。然后就把自己的膝盖跑伤了。膝盖的伤病让我不舒服了半年，知道写年终总结的今天，我也不知道自己恢复的怎么样了。反正跑步成绩是距离从前差远了，希望新年能慢慢恢复吧。这算是2022年我最大的遗憾了吧。</p><p>学车蛮顺利的。</p><p>七月底和小刘以及朱子林夫妇去平潭旅游了。一年中唯一一次自由的气息。海边真的很美好。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p22.jpg" style="zoom:25%;"><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p21.jpg" style="zoom:25%;"><h4 id="八月份"><a class="header-anchor" href="#八月份">¶</a>八月份</h4><p>八月份总体还是很忙碌。当时一面仍然在纠结转专业的事情，另一面主要就是开学考复习和学车的交织。一面想赶在去学校之前把驾驶证拿下，另一面要准备开学的六七门考试，当时队伍还召集我们提前去学校开展集训。权衡再三之后我还是把集训给推了，时至今日我也不后悔。</p><p>当时压力蛮大的，因为学车这件事不是决定学就能拿下的，还有可能因为自己的原因考证失败。当时一面紧凑地学车、准备考试，一面还要抓紧时间复习考试。</p><p>不过七八月的努力都在九月得到了回报。</p><h4 id="九月份"><a class="header-anchor" href="#九月份">¶</a>九月份</h4><p>九月份的开头就是开学考得到了回报，基本每一门考试都取得了令自己满意的成绩，学分绩提高了0.8分，排名也进步了十几名，算是阶段性的小胜利吧。</p><p>然后就是转专业的事情，焦虑担心了半年，终于如愿转到软件工程专业了，具体的情况之前也写帖子回顾过了。总之就是处境的豁然开朗。</p><p>当然也还是遇到了一些问题，就不一一细说了。</p><p>在九月下旬搬到了泰达校区。</p><p>一切都比我想象的令我适应。我非常喜欢在泰达的生活。唯一的不足就是运动器械的不足。</p><p>九月底也申请加入了张老师的课题组，做异常检测的项目。</p><p>总之，九月份是收获的一个月，也是过渡的一个月。</p><h4 id="十月份"><a class="header-anchor" href="#十月份">¶</a>十月份</h4><p>十月份我又开始吃水煮餐了。这一次减脂的原因是选了游泳课，还是希望在课上保持良好的身材的，因此就减脂了一段时间。后来因为疫情，游泳课也不怎么上了，加上水煮实在是性价比不高，价格贵了好多，就放弃了。</p><p>到了十月份膝盖还是很不舒服。申请出学校去泰达医院做了一次检查。医生倒是说膝盖没有什么明显的损伤，主要是下肢力线不正。感觉就是小腿外翻吧，确实是自己没有控制好运动量，把自己折腾伤了。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p23.jpg" style="zoom:25%;"><p>医生推荐去外面的机构定制矫正垫，但是感觉是个坑，仔细权衡之后就放弃了。打算静养。有氧运动就改成游泳为主了。</p><p>十月中旬在津南笑言宿舍的空床搭起了自己的临时宿舍。在淘宝上买了一套一百元左右的床具，在津南也算有了落脚的地方。</p><p>月底开始追了《龙之家族》第一季，可惜剧集很短，意犹未尽之下我又把后续的故事都看完了。新的一季据说要2024才播，瞬间没有了期待。</p><img src="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/p24.jpg" style="zoom:25%;"><p>感觉权游世界非常和我胃口，没有其他美剧让我如此着迷了。</p><h4 id="十一月份"><a class="header-anchor" href="#十一月份">¶</a>十一月份</h4><p>十一月份的开始被创高给难住了。以前创高从来不会是令我头疼的问题，但是今年情况有些特殊。一方面是我自己的膝盖不舒服，急需休息；另一方面是我搬到了泰达校区，在津南能跑创高的日子并不多。但是却要一学期跑70km。显然还是比较头疼。后来就花钱解决问题——找人代跑了。</p><p>十一月份没有什么值得回忆和记录的。一切就都在正常当中推进。不过十一月份已经显露出要放开的迹象了。暴风雨前的平静。</p><p>十一月份的惊喜应该就是买了林筠皓的头戴式耳机，款式非常喜欢，头戴式耳机也让我更沉迷于听音乐了。</p><h4 id="十二月份"><a class="header-anchor" href="#十二月份">¶</a>十二月份</h4><p>果不其然，学校的防疫还是被击穿了，当校内有了阳性病例之后，学生的情绪非常难以控制。我们预想学校也不能组织线下的考试。民意沸腾之后，学校再次提前把我们遣返了。在十二月初，我时隔一年来到了上海，见到了爸妈姐姐奶奶。</p><p>虽然疫情还是比较严重，但是我还是没忍住办了健身卡。为了让自己尽量晚一些🐏，我选择戴口罩健身，这倒没什么不适。</p><p>不过该来的总会来的，在十二月的尾巴，我们家还是无一例外全部中招了。最难受的就是发烧的两天，加上嗓子疼，病程算三天吧，之后就没什么感觉了。不过为了保险起见，我一直没有运动。打算再休息一两天开始恢复运动了。</p><p>十二月份又找了一份科研实习的工作。这给了我的生活很大的压力。希望我能处理好吧。</p><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><p>回顾这一年，可以说是值得回忆的、令我骄傲的一年。因为疫情原因，虽然没有很多玩乐值得回顾。但是在学习上确实算是丰收的一年。</p><p>养成了自己的学习习惯，会做好每一次的平时作业，会好好对待期末的任务。我想这是好的。</p><p>感觉自己成长了，也变得更努力了。之前也不是摆烂，但是总是感觉努力的很一般。转专业之后对于自己的定位变了，也有了相对明确的追求，push着自己慢慢走下去。</p><p>这一年看的书少了很多，希望自己重新捡起来。到了年底，因为疫情原因，养了一身的肥肉，新的一年也希望保持身材管理。</p><p>明年的年终总结就可以写下自己的去向了吧。北京还是华东，学硕、专硕还是直博，做什么方向，一切似乎都还是迷雾重重。希望我能选一条让自己满意的路吧。</p><p>我只希望一直这样走下去，慢慢地学习，慢慢地变好，慢慢地品味生活。我不是一个很努力、很执着于学习的人，但是我是一个想保持学习状态的人。一鸣哥的“承认自己走得慢”让我对自己的习惯有了新的看法。</p><p>希望未来能和更多的人接触，在放开之后，去看更精彩的世界。</p><p>2022，年终~</p>]]></content>
    
    
    <summary type="html">创建博客的第一年，开始第一篇属于自己的年终总结吧！</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
    <category term="自言自语" scheme="https://43.143.214.130/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
    <category term="年终总结" scheme="https://43.143.214.130/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>学习DCN模型</title>
    <link href="https://43.143.214.130/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/"/>
    <id>https://43.143.214.130/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-12-19T08:49:44.000Z</published>
    <updated>2022-12-19T11:44:06.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3><p>DCN模型由论文《Deep &amp; Cross Network for Ad Click Predictions》提出。本次对DCN模型的学习也就是对该论文的阅读。</p><h3 id="补充"><a class="header-anchor" href="#补充">¶</a>补充</h3><p>阅读论文到一半突然对这两篇关于DCN模型的论文有些开窍了。不管是DCN模型还是DCN-V2模型，他们都服务于广告点击率的预测，大致的任务也就是输入一则广告的相关信息（包含各类特征信息），我们的模型应该输出对于其点击率的预测。个人认为，这种任务和输入图像、输出分类结果没什么区别。所以其实一开始也就是采用DNN（深度神经网络）这种模型，只不过效果不算好，因此改进，加入交叉网络而已。</p><h3 id="论文阅读"><a class="header-anchor" href="#论文阅读">¶</a>论文阅读</h3><h4 id="简介"><a class="header-anchor" href="#简介">¶</a>简介</h4><p><strong>点击率（Click Through Rate，CTR）预测</strong>是一个大规模问题。</p><p>在广告业中，广告商向出版商付费，<strong>流行的支付模式是每次点击的成本</strong>。因此，出版商的收入很大程度依赖于准确预测CTR的能力。</p><p>**<font color="red">识别经常预测的特征同时探索少见的交叉特征</font>**是做出好的预测的关键。但是网络规模的推荐系统的数据大多是离散和分类的，导致特征空间大而稀疏。限制采用线性模型。</p><p>引入一种新的神经网络结构——交叉网络。该网络以自动的方式明确应用特征交叉。</p><p>联合训练交叉网络和深度神经网络。</p><h4 id="深度和交叉网络DCN"><a class="header-anchor" href="#深度和交叉网络DCN">¶</a>深度和交叉网络DCN</h4><p>在本节描述深度和交叉网络（DCN）模型的架构：从一个嵌入和堆叠层开始，然后是平行的交叉网络和深度网络，最后是组合层，将两个网格的输出结合起来。如下图所示：</p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i1.png" alt="image" style="zoom: 40%;"><h5 id="嵌入和堆积层（Embedding-and-Stacking-Layer）"><a class="header-anchor" href="#嵌入和堆积层（Embedding-and-Stacking-Layer）">¶</a>嵌入和堆积层（Embedding and Stacking Layer）</h5><p>考虑具有稀疏和密集特征的输入数据。<font color="red">输入的数据大多是分类特征</font>，例如“country=usa”，这样的特征也会变**<font color="red">编码为独热向量</font><strong>，如[0, 1, 0]，但是这样会</strong><font color="red">导致特征空间很高</font>**。</p><p>为了降低维度，采用一个**<font color="red">嵌入程序，将这些二进制特征转化为密集的实值向量（嵌入向量）</font>**。</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i2.png" alt="image"></p><p>其中Xembed,i是嵌入向量，xi是第i类的二进制输入，Wembed,i是相应的嵌入矩阵，<strong>嵌入矩阵会随其他参数一起被优化</strong>。</p><p>最后，嵌入向量于归一化的密集特征堆叠（stack）成一个向量x0。</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i3.png" alt="image"></p><h5 id="交叉网络"><a class="header-anchor" href="#交叉网络">¶</a>交叉网络</h5><p>交叉网络的关键思想是**<font color="red">以一种有效的方式应用显示的特征交叉</font>**。</p><p>交叉网络由交叉层组成，每层有以下公式：</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i4.png" alt="image"></p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i5.png" alt="image"></p><p>交叉网络的参数数量少，限制了模型的容量，为了捕捉高度非线性的相互作用，引入一个并行的深度网络。</p><h5 id="深度网络"><a class="header-anchor" href="#深度网络">¶</a>深度网络</h5><p>深度网络的结构相比其他的深度神经网络的结构会更简单一些，是一个**<font color="red">全连接的前馈神经网络</font>**，每层有以下公式：</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i6.png" alt="image"></p><h5 id="组合层"><a class="header-anchor" href="#组合层">¶</a>组合层</h5><p>组合层将两个网络的输出连接起来，将串联的向量送人标准的logits层。</p><p>以下是一个二分类概率的公式：</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i7.png" alt="image"></p><p>其中XL1是交叉网络的输出，hL2是深度网络的输出（<strong><font color="red">二者转置之后串联起来成为一个向量</font></strong>），Wlogits是组合层的权重向量，<font color="red">相当于两个一维向量点积得到一个数</font>，仍然会输入σ(x)=1/(1+exp(-x))。</p><p>损失函数如下：</p><p><img src="/2022/12/19/%E5%AD%A6%E4%B9%A0DCN%E6%A8%A1%E5%9E%8B/i8.png" alt="image"></p><p>yi是真实标签，pi是计算出的概率。</p><p><strong><font color="red">但是为什么输出的是概率？不是应该是点击率吗？还是说点击率也按区间转化成了标签？</font></strong></p><h4 id="交叉网络的分析"><a class="header-anchor" href="#交叉网络的分析">¶</a>交叉网络的分析</h4><p>主要就是分析DCN当中，交叉网络的有效性。</p><p>这里暂时也不太看得懂。</p><h4 id="实验结果"><a class="header-anchor" href="#实验结果">¶</a>实验结果</h4><p>这一节主要是评估DCN的性能。</p><h5 id="Criteo数据集"><a class="header-anchor" href="#Criteo数据集">¶</a>Criteo数据集</h5><p>Criteo数据集是为了预测广告的点击率，有13个整数特征和26个分类特征，每个类别都有很高的cardinality。因此对于这个数据集而言，0.001的logloss都是很有意义的。</p><p>该数据集包含7天（约4100万条记录），使用前6天的数据用于训练，第七天的数据随机拆分为同等大小的验证集和测试集。</p><h5 id="实施细节"><a class="header-anchor" href="#实施细节">¶</a>实施细节</h5><p>官方的代码是用TensorFlow实现的。</p><h4 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h4><p>论文的大致阅读就到这里了，对于复现模型而言，性能测试和基线方法的比较可以暂时不谈，毕竟支撑的知识还是太少太少。接下来开始具体的复现这个DCN模型吧。</p><h3 id="复现DCN模型"><a class="header-anchor" href="#复现DCN模型">¶</a>复现DCN模型</h3><h4 id="学习他人的复现："><a class="header-anchor" href="#学习他人的复现：">¶</a>学习他人的复现：</h4>]]></content>
    
    
    <summary type="html">在尝试利用RecBole复现DCN-V2模型的时候发现根本看不懂，所以先学习一下DCN模型吧。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="RecBole" scheme="https://43.143.214.130/tags/RecBole/"/>
    
    <category term="科研实习" scheme="https://43.143.214.130/tags/%E7%A7%91%E7%A0%94%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>利用RecBole框架复现DCN-V2模型</title>
    <link href="https://43.143.214.130/2022/12/19/%E5%88%A9%E7%94%A8RecBole%E6%A1%86%E6%9E%B6%E5%A4%8D%E7%8E%B0DCN-V2%E6%A8%A1%E5%9E%8B/"/>
    <id>https://43.143.214.130/2022/12/19/%E5%88%A9%E7%94%A8RecBole%E6%A1%86%E6%9E%B6%E5%A4%8D%E7%8E%B0DCN-V2%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-12-19T07:42:25.000Z</published>
    <updated>2022-12-19T08:50:06.307Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、-论文来源"><a class="header-anchor" href="#一、-论文来源">¶</a>一、 论文来源</h4><p>本次复现的DCN-V2模型由《DCN V2: Improved Deep &amp; Cross Network and Practical Lessons for Web-scale Learning to Rank Systems》提出。</p><h4 id="二、-数据集"><a class="header-anchor" href="#二、-数据集">¶</a>二、 数据集</h4><p>本模型在Criteo数据集上运行。Criteo数据集通过RecBole框架提供的方法可转换为.INTER类型的原子文件。</p><h4 id="三、-论文阅读-模型复现"><a class="header-anchor" href="#三、-论文阅读-模型复现">¶</a>三、 论文阅读 &amp; 模型复现</h4><h5 id="1、-简介"><a class="header-anchor" href="#1、-简介">¶</a>1、 简介</h5><p>学习排名（Learning to Rank，LTR）是现代机器学习和深度学习的重要问题之一。在LTR模型中，<font color="red"><strong>学习有效的特征交叉</strong></font>吸引关注。</p><p>有效的特征交叉提供了超出个别特征的额外的交互信息。</p><p>为了更准确地捕获有效的特征交叉，常见的补救措施是通过<font color="red">更宽或者更深的网络</font>进一步增加模型的容量。但是<font color="red">提高模型性能的同时，降低了服务速度</font>。</p><p>Deep&amp;Cross Network（DCN）是有效和优雅的。</p><p>DCN-V2首先通过交叉层学习内部的显性特征交互，然后与深度网络结合，学习互补的隐性交互。DCN-V2的核心是交叉层。</p><h5 id="2、相关工作"><a class="header-anchor" href="#2、相关工作">¶</a>2、相关工作</h5><p>（好吧，其实读到这里都没有看懂，希望后面具体描述能看懂）</p><h5 id="3、DCN-V2"><a class="header-anchor" href="#3、DCN-V2">¶</a>3、DCN-V2</h5><p>（感觉有必要先学习一下DCN模型）</p>]]></content>
    
    
    <summary type="html">熟悉了RecBole框架之后，那就复现一篇论文中的模型吧</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="RecBole" scheme="https://43.143.214.130/tags/RecBole/"/>
    
    <category term="科研实习" scheme="https://43.143.214.130/tags/%E7%A7%91%E7%A0%94%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>熟悉RecBole框架</title>
    <link href="https://43.143.214.130/2022/12/18/%E7%86%9F%E6%82%89RecBole%E6%A1%86%E6%9E%B6/"/>
    <id>https://43.143.214.130/2022/12/18/%E7%86%9F%E6%82%89RecBole%E6%A1%86%E6%9E%B6/</id>
    <published>2022-12-18T08:31:23.000Z</published>
    <updated>2022-12-18T14:36:03.410Z</updated>
    
    <content type="html"><![CDATA[<p>最近在争取一份科研实习工作，第一步的任务是学习Pytorch框架（因为我之前没有用过）。肝了一天半的时间之后得到了第二个任务，熟悉RecBole框架。</p><p>这相对来说更难一些，因为这是老师课题组自己开发的框架，推荐算法也是我没有接触过的领域。但是继续冲吧。只是不知道什么时候可以做课内的ddl，课内的绩点也不能松懈呀。</p><p>RecBole框架相应的论文是《RecBole: Towards a Unified, Comprehensive and Efficient Framework for Recommendation Algorithms》。先读这篇论文吧。</p><h4 id="摘要"><a class="header-anchor" href="#摘要">¶</a>摘要</h4><p>近年来涌现了大量的推荐算法。<font color="red">志在提出一个统一、全面、高效的推荐系统库，RecBole</font>。在28个数据集上实现了73个推荐算法。该框架是基于Pytorch实现的。</p><h4 id="1、简介"><a class="header-anchor" href="#1、简介">¶</a>1、简介</h4><p>推荐算法飞速发展，很难以统一的方式或框架实现比较的基线方法。但是实际上推荐算法的许多通用组件是比较相似的，所以提出了这个统一的框架。</p><p>RecBole库主要特点和能力如下：</p><ul><li>统一的推荐框架：采用PyTorch开发。三大核心部分：数据模块、模型模块、评估模块。封装通用的组件、函数或程序。</li><li>通用和可扩展的数据结构：在两个层面实现了支持的数据结构。用户层面：原子文件，表征四种主流推荐任务的输入；算法层面：引入通用的数据结构Interaction。</li><li>全面的基准模型和数据集：实现了73种推荐算法，纳入了28个常用的数据集来评估推荐系统。</li><li>高效的GPU加速执行：暂时不用学，我也没有可用的GPU算力。</li><li>广泛和标准的评估协议：…。</li></ul><h4 id="2、RecBole库"><a class="header-anchor" href="#2、RecBole库">¶</a>2、RecBole库</h4><h5 id="2-1-数据模块"><a class="header-anchor" href="#2-1-数据模块">¶</a>2.1  数据模块</h5><h6 id="2-1-1-整体数据流"><a class="header-anchor" href="#2-1-1-整体数据流">¶</a>2.1.1 整体数据流</h6><p>原始输入-&gt;原子文件-&gt;Dataset-&gt;Dataloader-&gt;算法。</p><p><font color="red">数据流涉及两种特殊的数据形式：用户和算法</font>。</p><p>对于数据准备，定义六种原子文件类型，统一用户层面的输入。<font color="red">原子文件能描述不同推荐任务所需的大多数形式的输入数据</font>。</p><p>在算法层面，引入灵活的数据结构交互，为不同的推荐算法提供了<font color="red">统一的内部数据表示</font>。</p><h6 id="2-1-2-原子文件"><a class="header-anchor" href="#2-1-2-原子文件">¶</a>2.1.2 原子文件</h6><p>原子文件是<strong>描述各种推荐任务的输入</strong>的基本组件。试图<strong>总结和统一主流推荐任务的最基本的输入形式</strong>。</p><p>总结出四种基本数据类型：token、token sequence、float、float_sequence。前两者表示离散特征（ID、类别），后两者表示连续特征（价格）。</p><ul><li>.INTER是所有推荐任务中<font color="red">必须使用的文件</font>，每一行由用户ID、项目ID、用户项目评分、时间戳、评论文本组成。</li><li>.USER是<font color="red">用户档案文件</font>。包含用户的分类和特征。</li><li>.ITEM是项目特征文件，描述项目特征。</li></ul><p><strong><font color="red">语境感知的推荐一般就需要用到inter、user、item了</font></strong>。</p><ul><li><p>.KG是知识图谱文件，用于基于知识的推荐。每一行对应一个&lt;头实体、尾实体、关联ID&gt;的三元组。</p></li><li><p>.LINK用于基于知识的推荐。记录了推荐系统项目和知识图谱实体之间的对应关系。</p></li><li><p>.NET是社会网络文件，用于社会推荐。</p></li></ul><p><strong>原子文件可以覆盖大多数主流推荐任务的输入，如果不足以支持，可以以灵活的方式引入新的原子文件。</strong></p><h6 id="2-1-3-推荐任务的输入文件"><a class="header-anchor" href="#2-1-3-推荐任务的输入文件">¶</a>2.1.3 推荐任务的输入文件</h6><p>基于上述的原子文件，<font color="red">可以利用其<strong>组合</strong>来推进五种主流的推荐任务</font>：一般推荐、情境感知推荐、基于知识的推荐、顺序推荐和社交推荐。（目前实现前四种）</p><h6 id="2-1-4-内部数据结构Interaction"><a class="header-anchor" href="#2-1-4-内部数据结构Interaction">¶</a>2.1.4 内部数据结构Interaction</h6><p>Interaction被<font color="red">输入到推荐算法</font>中。</p><p>为了使其统一灵活，实现为基于<strong>python.dict</strong>的新的抽象数据类型（一个键值索引的数据结构）。键值对应输入的特征；值对应张量tensor。</p><h5 id="2-2-模型模块"><a class="header-anchor" href="#2-2-模型模块">¶</a>2.2 模型模块</h5><p>模型模块组织推荐算法的实现。</p><h6 id="2-2-1-统一的实现接口"><a class="header-anchor" href="#2-2-1-统一的实现接口">¶</a>2.2.1 统一的实现接口</h6><p>实现一个新的模型，只需重新规定接口与输入和评估模块连接。利用接口函数calculate_loss()进行训练，predict用于测试。同时建立了许多损失函数作为组件。</p><h6 id="2-2-2-已实现的模型"><a class="header-anchor" href="#2-2-2-已实现的模型">¶</a>2.2.2 已实现的模型</h6><p>实现了73个推荐模型。</p><h6 id="2-2-3-丰富的辅助功能"><a class="header-anchor" href="#2-2-3-丰富的辅助功能">¶</a>2.2.3 丰富的辅助功能</h6><p>比如说自动参数调整：给一个参数集，搜索最佳性能的最佳值。还有模型保存和模型加载。支持从存储的中断点恢复模型学习。等等等等</p><h5 id="2-3-评价模块"><a class="header-anchor" href="#2-3-评价模块">¶</a>2.3 评价模块</h5><p>功能是实现推荐系统常用的评价协议。不同的模式可以在同一个评价模块下进行比较。</p><h6 id="2-3-1-评价指标"><a class="header-anchor" href="#2-3-1-评价指标">¶</a>2.3.1 评价指标</h6><p>同时支持<font color="red">基于价值和基于排名的评价指标</font>。</p><p>基于价值的评价就是利用均方根误差、平均误差，衡量真实值和预测值之间的预测误差；基于排名的评价，用于top-K项目推荐，衡量算法生成的推荐名单的排名性能。</p><h6 id="2-3-2-评价设置"><a class="header-anchor" href="#2-3-2-评价设置">¶</a>2.3.2 评价设置</h6><p><strong><font color="red">主要分歧在于“基于排名top-K项目推荐”的评价</font></strong>。重点不是提供最合适的评价，而是提供大多数广泛采用的评价。</p><p>同时，本库提供了一种可能性，就是可以比较各种模型在不同评价协议下的性能。</p><p>为了方便各种评估设置，将相关函数封装成四个主要部分：Group、Split、Order、NegSample。</p><h6 id="2-3-3-Top评价的加速策略"><a class="header-anchor" href="#2-3-3-Top评价的加速策略">¶</a>2.3.3 Top评价的加速策略</h6><p>计算Top-K评价指标通常很耗时。原因在于，需要评估每个用户-项目对的得分。不同用户在测试集有不同数量的真实项目，所以补全，没有的就说负无穷。</p><p>…</p><h6 id="2-4-4-效率和可扩展性"><a class="header-anchor" href="#2-4-4-效率和可扩展性">¶</a>2.4.4 效率和可扩展性</h6><h4 id="3-该库的使用实例"><a class="header-anchor" href="#3-该库的使用实例">¶</a>3. 该库的使用实例</h4><h5 id="3-1-运行现有的模型"><a class="header-anchor" href="#3-1-运行现有的模型">¶</a>3.1 运行现有的模型</h5><p>库中包含的模型可以用固定参数或自动调参来运行。</p><h6 id="3-1-1-固定参数的模型运行"><a class="header-anchor" href="#3-1-1-固定参数的模型运行">¶</a>3.1.1 固定参数的模型运行</h6><p>（i）对数据集进行格式化：首先用户选择数据集，根据脚本进行格式化，可以为不同的数据集生成所需的原子文件。代码：atomic_file=PreProcess(dataset)</p><p>（ii）生成配置。可以通过不同的方式生成配置。可以写一个配置文件，在主函数当中读取这个文件；可以在命令行包含参数；可以在代码中写入参数字典。（<font color="red">这里的参数不是模型的参数，是程序的参数</font>）</p><p>（iii）筛选和拆分数据集。提供丰富的辅助功能来过滤和分割数据集。</p><p>（iv）加载模型。</p><p>（v）训练和评估。</p><h6 id="3-1-2-参数调整（-font-color-red-说是超参数调整更为合理-font-）"><a class="header-anchor" href="#3-1-2-参数调整（-font-color-red-说是超参数调整更为合理-font-）">¶</a>3.1.2 参数调整（<font color="red">说是超参数调整更为合理</font>）</h6><p>可以根据所提供的超参数范围来优化一个给定的模型。</p><p>（i）设置参数范围：在hyper.test文件中提供候选参数。在该文件中，每一行的格式都是参数=[value1, value2, …, valuen]</p><p>（ii）设置调优方法：在库hyperopt的基础上实现的。给定一组参数值，有四种调优方法“网格搜索”、“随机搜索”…代码：hy =HyperTuning(objective, tuning_method,range_file)</p><p>（iii）用户通过hy.run()启动调优进程。输出保存最优参数和相应的模型性能。</p><h5 id="3-2-实现新的模型"><a class="header-anchor" href="#3-2-实现新的模型">¶</a>3.2 实现新的模型</h5><p>基于RecBole，通过实例化以下三个函数实现一个新模型：</p><p>（i）实现<strong>init()函数</strong>：在这个函数中，用户执行参数初始化、全局变量定义等。新的模型是提供的抽象模型类的子类，目前为止，已经实现了一般四类推荐算法的抽象类。</p><p>（ii）实现<strong>calculate_loss()函数</strong>：计算新模型要优化的损失，库将自动调用不同的优化方法学习模型。</p><p>（iii）<strong>predict()函数</strong>：从输入数据到输出结果。</p><h4 id="4-与现有的库的比较"><a class="header-anchor" href="#4-与现有的库的比较">¶</a>4. 与现有的库的比较</h4><p>其实此前也有一些推荐系统库。编程语言逐渐从C/C++/JAVA到Python/Tensorflow/PyTorch。</p><p><strong><font color="red">RecBole的目标是简化新算法的开发过程。</font></strong></p>]]></content>
    
    
    <summary type="html">争取科研实习的第二步，熟悉RecBole框架。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="RecBole" scheme="https://43.143.214.130/tags/RecBole/"/>
    
    <category term="科研实习" scheme="https://43.143.214.130/tags/%E7%A7%91%E7%A0%94%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>“导师有约下午茶”听汪定老师分享有感</title>
    <link href="https://43.143.214.130/2022/11/17/%E2%80%9C%E5%AF%BC%E5%B8%88%E6%9C%89%E7%BA%A6%E4%B8%8B%E5%8D%88%E8%8C%B6%E2%80%9D%E5%90%AC%E6%B1%AA%E5%AE%9A%E8%80%81%E5%B8%88%E5%88%86%E4%BA%AB%E6%9C%89%E6%84%9F/"/>
    <id>https://43.143.214.130/2022/11/17/%E2%80%9C%E5%AF%BC%E5%B8%88%E6%9C%89%E7%BA%A6%E4%B8%8B%E5%8D%88%E8%8C%B6%E2%80%9D%E5%90%AC%E6%B1%AA%E5%AE%9A%E8%80%81%E5%B8%88%E5%88%86%E4%BA%AB%E6%9C%89%E6%84%9F/</id>
    <published>2022-11-17T08:16:50.000Z</published>
    <updated>2022-11-17T10:49:38.110Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="65ea7a07bc74c12c524ca377095765be63f32c9bd0f43b2d6b95763dd1f52eab"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章不能给你看哦，不过你要是猜对了密码，那就看叭~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">也许应该多听一些讲座和经验之谈，对吗？</summary>
    
    
    
    <category term="漫无目的地思考" scheme="https://43.143.214.130/categories/%E6%BC%AB%E6%97%A0%E7%9B%AE%E7%9A%84%E5%9C%B0%E6%80%9D%E8%80%83/"/>
    
    
    <category term="自言自语" scheme="https://43.143.214.130/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>大三上第十二周组会回顾</title>
    <link href="https://43.143.214.130/2022/11/16/%E5%A4%A7%E4%B8%89%E4%B8%8A%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8%E7%BB%84%E4%BC%9A%E5%9B%9E%E9%A1%BE/"/>
    <id>https://43.143.214.130/2022/11/16/%E5%A4%A7%E4%B8%89%E4%B8%8A%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%91%A8%E7%BB%84%E4%BC%9A%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-11-16T07:45:41.000Z</published>
    <updated>2022-11-16T12:28:06.045Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h4><p>上上周的组会主要是确定了数据集的问题，老师安排了来自字节跳动和挑战赛的两份数据集。</p><p>学长让我处理挑战赛的数据集，学长本人处理字节跳动的数据集。</p><p>上周的组会的内容主要就是我们两人汇报自己的处理结果。</p><p>老师认为挑战赛的数据比较适合研究，再加上由于我知识有限，处理的不太到位，以及学长需要本人了解数据集的结构，所以上周学长再次处理了挑战赛的数据集，就没给我安排其他工作。</p><p>由于我自己处理，得出了对这份数据集一个初步的认知，今天组会学长和老师再根据这份数据集进行了讨论，让我有了更多的收获。</p><h4 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h4><p>数据集来源是一个集群，里面有node-1~node-6六个节点（物理机）。</p><p>我们需要研究的是部署在其上的服务（service），多个服务共同构成一个微服务架构。</p><p>实际上部署服务的节点主要是node-5和node-6。</p><p>不同的服务分散在这两个节点上（二者有共同的服务），并且每个service有三个实例（封装成container）。</p><p>服务之间有相对复杂的调用关系和拓扑结构。</p><p>因此各个服务的时间序列异常也许会有较强的关联。</p><p>每个service约有40+个指标（KPI）。</p><p>因此实际上会有成百上千个时间序列。</p><p>目标是在微服务的层次上进行多指标时间序列异常检测。</p><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><p>实际上在上周处理AIOps挑战赛复赛数据集的时候就已经对此有一个大致的认知了，但是这个认知是模糊的。此前对于课题组的大致方向也不是很理解。</p><p>但是经过学长重新整理了一遍数据框架，以及听了学长和老师的讨论之后，不管是对数据集还是对研究方向都有了更深的认知。</p>]]></content>
    
    
    <summary type="html">记录一下本周组会的收获~</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="组会" scheme="https://43.143.214.130/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>GraphStructures01阅读笔记</title>
    <link href="https://43.143.214.130/2022/11/15/GraphStructures01%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/11/15/GraphStructures01%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2022-11-15T10:31:28.000Z</published>
    <updated>2022-11-15T14:54:51.513Z</updated>
    
    <content type="html"><![CDATA[<p>本次阅读的论文是《<strong>Learning Graph Structures With Transformer for Multivariate Time-Series Anomaly Detection in IoT</strong>》，主要目的是了解图结构在异常检测当中的应用。</p><h4 id="摘要"><a class="header-anchor" href="#摘要">¶</a>摘要</h4><p>IoT系统会产生大量的<strong>多变量时间序列数据</strong>。异常检测对此非常重要。但是和此前研读的论文不同的是，物联网是一个整体系统，我们不能孤立地考虑其中的时间序列数据，需要考虑<strong>传感器之间复杂的拓扑关系和非线性关系</strong>（需要对此建模）。</p><p>本文介绍GTA，用于<strong>多变量时间序列异常检测</strong>，包括：<strong>自动学习一个图结构</strong>、图卷积、使用基于转换器的架构对时间依赖性建模。</p><h4 id="一-简介"><a class="header-anchor" href="#一-简介">¶</a>一. 简介</h4><p>IoT系统传感器很多，多个传感器形成多个指标，因此形成多变量时间序列。<strong>整体状态的检测</strong>更为重要。多个传感器的数据以<strong>复杂</strong>的拓扑逻辑和非线性方式<strong>相关</strong>。</p><p>现实的问题是：<strong>传感器依赖关系不可见</strong>，获取成本极高，可否自己建立？</p><p>现有的方法分为两条线：<font color="red">基于重建的模型（R-model）</font>和<font color="red">基于预测的模型（F-model）</font>。</p><p>图卷积网络（GCNs），图形神经网络（图形节点通过结构传播信息），<strong>对传感器的拓扑关系进行建模</strong>。</p><p>大多数现有的基于图的方法：通过测量<strong>传感器嵌入之间的余弦相似度</strong>学习图结构，并将最前K个节点定义为源节点连接，然后用graph attention convolution捕捉信息传播过程。</p><p>对此提出问题：</p><p>（1）传感器之间的点乘（余弦相似度）导致时间和空间的复杂性。</p><p>（2）空间距离紧密不代表拓扑结构强关联。</p><p>对此，提出了GTA（异常检测的图形学习与转化器）。通过基于Gumbel-Softmax采样技巧的连接学习策略，从学习涉及实体内所有传感器的全局双定向图结构的角度设计。</p><p>可以在训练过程中自动发现隐藏的关联。</p><h4 id="二-相关工作"><a class="header-anchor" href="#二-相关工作">¶</a>二. 相关工作</h4><h5 id="A-单变量时间序列异常检测"><a class="header-anchor" href="#A-单变量时间序列异常检测">¶</a>A. 单变量时间序列异常检测</h5><p>传统的框架：估计&amp;检测，。<strong>估计值与实际值的差异</strong>，也是我最早理解的方法。</p><h5 id="B-多变量时间序列异常检测"><a class="header-anchor" href="#B-多变量时间序列异常检测">¶</a>B. 多变量时间序列异常检测</h5><p>利用多个变量之间的<strong>关联性</strong>来<strong>提高</strong>异常检测的<strong>准确性</strong>。</p><h4 id="三-问题陈述"><a class="header-anchor" href="#三-问题陈述">¶</a>三. 问题陈述</h4><p>考虑的是<strong>一个实体内</strong>，由多个传感器检测数据构成的多变量（还没有到跨实体的层次）。</p><p><strong>他们认为正常数据和异常数据高度不平衡，因此只在正常数据上建模（继承基于预测的策略）</strong>。基于窗口大小为n的历史数据，预测x(t)。</p><p>每个测试时间点有一个异常分数，由此决定是否异常。</p><p><strong>定义与图有关的基本概念：</strong></p><p><strong>有向图</strong>的定义G（V, E）和之前一样，点代表传感器。</p><p><strong>节点的领域</strong>，就是和节点相邻的点。</p><h4 id="四-方法论"><a class="header-anchor" href="#四-方法论">¶</a>四. 方法论</h4><p>物联网系统中，传感器系统有复杂的拓扑关系。此前的方法应用<strong>不同的距离计量方法</strong>衡量节点的关系，选最接近的K个作为邻居。</p><p>现在，设计一个有向图结构的LP，自动学习节点间的关系矩阵。LP的核心被命名为Gumbel-Softmax。</p><p>被发现的隐藏关联随后被送入图卷积层。</p>]]></content>
    
    
    <summary type="html">学习Graph Structures的第一篇论文笔记</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="Graph Structures" scheme="https://43.143.214.130/tags/Graph-Structures/"/>
    
  </entry>
  
  <entry>
    <title>leetcodeT5最长回文子串题解</title>
    <link href="https://43.143.214.130/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://43.143.214.130/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/</id>
    <published>2022-11-15T07:13:22.000Z</published>
    <updated>2022-11-15T07:27:04.352Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述如下："><a class="header-anchor" href="#题目描述如下：">¶</a>题目描述如下：</h4><p><img src="/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i1.png" alt="i"></p><h4 id="题解："><a class="header-anchor" href="#题解：">¶</a>题解：</h4><p>对于一个回文子串，比如“abjba”，去除首尾字符得到的“bjb”仍然是回文子串，由这样的结构容易想到<strong>动态规划</strong>。</p><p>s[i,j]表示i到j的子串。</p><p>s[i,j]是回文串的前提是<strong>s[i+1,j-1]是回文串且s[i]==s[j]</strong>，这也就能成立递归了。</p><p>直接开一个n*n的bool型数组IF[i] [j]，其值为1表示s[i,j]是回文串，否则不是，我们只需要考虑i&lt;=j的情况就好了。</p><p>首先IF[i] [i]直接赋1，因为单个字符一定是回文串。</p><p>接着按照长度开始遍历，2~n，起始点均从0开始，注意边界。需要单独处理的是长度为2/3的子串**（只需要s[i]==s[j]）**，否则按照递归条件处理。</p><p>对于是回文串的子串，需要和已存储的最长回文子串进行比较。</p><p>如此则完成。</p><p>时间复杂度O(n^2)。</p><h4 id="源代码："><a class="header-anchor" href="#源代码：">¶</a>源代码：</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        string maxs = <span class="string">""</span>;</span><br><span class="line">        maxs += s[<span class="number">0</span>];</span><br><span class="line">        vector&lt;vector &lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">IF</span>(len, vector&lt;<span class="keyword">bool</span>&gt;(len));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            IF[i][i] = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=len;l++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">                <span class="keyword">int</span> j = i + l <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; (len<span class="number">-1</span>)){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]){</span><br><span class="line">                    IF[i][j] = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>((j - i <span class="number">-1</span> &lt; <span class="number">2</span>)){</span><br><span class="line">                        IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span>{</span><br><span class="line">                        <span class="keyword">if</span>(IF[i+<span class="number">1</span>][j<span class="number">-1</span>]){</span><br><span class="line">                            IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(IF[i][j]){</span><br><span class="line">                    <span class="keyword">int</span> length = j - i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; maxLen){</span><br><span class="line">                        maxs = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;k++){</span><br><span class="line">                            maxs += s[k];</span><br><span class="line">                        }</span><br><span class="line">                        maxLen = length;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxs;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>以上。</p>]]></content>
    
    
    <summary type="html">太久没更新了，写一篇题解吧。</summary>
    
    
    
    <category term="算法学习" scheme="https://43.143.214.130/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="leetcode" scheme="https://43.143.214.130/tags/leetcode/"/>
    
    <category term="动态规划" scheme="https://43.143.214.130/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>异常检测挑战赛数据绘制</title>
    <link href="https://43.143.214.130/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/"/>
    <id>https://43.143.214.130/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/</id>
    <published>2022-11-01T14:02:55.000Z</published>
    <updated>2022-11-01T14:34:35.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a class="header-anchor" href="#前言：">¶</a>前言：</h4><p>上周学长和我说如果论文读的差不多了可以把数据集上的数据用matplotlib画出来。想着操纵一下真实的数据想必能对项目有更深的理解，于是开始学习。</p><p>matplotlib是Python的第三方库，确实很重要。</p><p>学习本身我也就是相当于学会怎么用”锤子“，所以也没什么值得分享和记录的。</p><p>读者有需要的可以去看莫凡Python的网课，链接如下：</p><blockquote><p><a href="https://www.bilibili.com/video/BV1Jx411L7LU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=9d8000465f487fa8d1bdc7f47736df48">【莫烦Python】Matplotlib Python 画图教程_哔哩哔哩_bilibili</a></p></blockquote><h4 id="正文："><a class="header-anchor" href="#正文：">¶</a>正文：</h4><p>本次操作数据集其实需要的matplotlib知识并不多。</p><h5 id="1-先了解csv文件里面数据存储的形式"><a class="header-anchor" href="#1-先了解csv文件里面数据存储的形式">¶</a>1.先了解csv文件里面数据存储的形式</h5><p>有四列属性，第一列是时间戳，第二列是节点名称，第三列是KPI名称（一个文件当中都相同），第四列是具体数值。大致如下图所示。</p><p><img src="/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/1.png" alt=""></p><p>一个文件基本上有四十个节点，每个节点对应一个KPI序列，因此KPI序列的x轴是timestamp，y轴是value。</p><h5 id="2-画出第一个时间序列"><a class="header-anchor" href="#2-画出第一个时间序列">¶</a>2.画出第一个时间序列</h5><p>对于每个节点，都有timestamp和value两个list，直接采用折线图（plot）的形式，即可画出序列，但是注意调整figsize（宽高比例）。</p><h5 id="3-利用subplot画出多个子图"><a class="header-anchor" href="#3-利用subplot画出多个子图">¶</a>3.利用subplot画出多个子图</h5><p>subplot就是让一个figure（一张图片）里面有多个子图（时间序列）</p><p><img src="/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/01.png" alt=""></p><h5 id="4-画出多个csv文件"><a class="header-anchor" href="#4-画出多个csv文件">¶</a>4.画出多个csv文件</h5><p>编写程序，遍历整个文件夹下所有csv文件，每个csv文件创建一个文件夹，每个文件夹存储该csv文件中所有时间序列。主要就是python的文件输出流了。</p><p>大抵是完成任务了。</p><p>（感觉需要记录一下，但是又不想细写，也没什么值得写的，就这样吧）</p><p>源代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个节点都有自己的名字和时间序列（timestamp&amp;value)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.time_stamp = []</span><br><span class="line">        self.value = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"D:\MTSAD\data\初赛评分数据\\2022-05-01\cloudbed\metric\container"</span></span><br><span class="line">file = os.listdir(url)</span><br><span class="line"><span class="comment"># 这一步是因为我已经手动画过这几个文件了，所以remove</span></span><br><span class="line">file.remove(<span class="string">".DS_Store"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_seconds.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_load_average_10s.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_system_seconds.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> F <span class="keyword">in</span> file:</span><br><span class="line">    <span class="comment"># 处理单个csv文件</span></span><br><span class="line">    <span class="comment"># 每个csv文件对应一系列节点</span></span><br><span class="line">    node_list = []</span><br><span class="line">    temp = url + <span class="string">"\\"</span> + F</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp, mode=<span class="string">"r"</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        header = <span class="built_in">next</span>(reader)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            time = <span class="built_in">int</span>(row[<span class="number">0</span>]) - <span class="number">1651334400</span></span><br><span class="line">            value = <span class="built_in">float</span>(row[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">                <span class="keyword">if</span> node.name == row[<span class="number">1</span>]:  <span class="comment"># 已经找到所属节点</span></span><br><span class="line">                    node.time_stamp.append(time)</span><br><span class="line">                    node.value.append(value)</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                temp_node = Node(row[<span class="number">1</span>])</span><br><span class="line">                temp_node.time_stamp.append(time)</span><br><span class="line">                temp_node.value.append(value)</span><br><span class="line">                node_list.append(temp_node)</span><br><span class="line"></span><br><span class="line">    tmp = F[:-<span class="number">4</span>]</span><br><span class="line">    save_path = <span class="string">"D:\MTSAD\data\img\\2022-5-01\container\\"</span> + tmp</span><br><span class="line">    os.mkdir(save_path)  <span class="comment"># 创建所属文件夹</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">24</span>, <span class="number">6</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            node = node_list[index]</span><br><span class="line">            fig.add_subplot(<span class="number">4</span>, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            plt.plot(node.time_stamp, node.value)</span><br><span class="line">            plt.title(node.name, loc=<span class="string">'left'</span>)</span><br><span class="line">            plt.subplots_adjust(wspace=<span class="number">0</span>, hspace=<span class="number">0.6</span>)  <span class="comment"># 调整子图间距</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 存储</span></span><br><span class="line">        plt.savefig(save_path + <span class="string">"\\"</span> + <span class="string">f"0<span class="subst">{j}</span>.png"</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">matplotlib的初步学习与应用 &amp; 异常检测数据集可视化</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="Python" scheme="https://43.143.214.130/tags/Python/"/>
    
    <category term="matplotlib" scheme="https://43.143.214.130/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>leetcodeT3无重复字符的最长子串题解</title>
    <link href="https://43.143.214.130/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://43.143.214.130/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/</id>
    <published>2022-10-27T07:46:14.000Z</published>
    <updated>2022-10-27T08:40:43.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述："><a class="header-anchor" href="#题目描述：">¶</a>题目描述：</h4><p>题目描述如下</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i1.png" alt=""></p><h4 id="题解一："><a class="header-anchor" href="#题解一：">¶</a>题解一：</h4><p>首先想到一个暴力的方法，考虑所有的子串。比如一个字符串的长度是n，那么它有1个长度为n的子串，2个长度为n-1的子串，…，n个长度为1的子串。从长到短遍历，对于每个子串判断其是否包含重复元素(这个比较简单)，一旦找到长度为x的不重复的子串，就可以返回长度x了。</p><p>时间复杂度是O（n3），长度遍历一层循环、特定长度子串遍历一层循环、判断是否重复一层循环。</p><p>这个方法是正确的，但是不能ac。因为太慢了，最长的一个测试样例时间超限。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断一个字符串是否含有重复字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifRe</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> arr[<span class="number">200</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">if</span>(ifExist(arr, count, s[i])){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            } </span><br><span class="line">            arr[count] = s[i];</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--){</span><br><span class="line">            <span class="keyword">int</span> nums = len - i + <span class="number">1</span>;  <span class="comment">//i长度得子串数目</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums;j++){</span><br><span class="line">                <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;(j+i);k++){</span><br><span class="line">                    temp[k-j] = s[k];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(!ifRe(temp, i)){</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="题解二："><a class="header-anchor" href="#题解二：">¶</a>题解二：</h4><p>只好选择时间复杂度更为优化的算法。</p><p>想到，遍历字符串的每个字符，所有的子串一定是以其中某个字符开头的连续序列。那么我们把每个字符开头的最长连续子串长度算出，再取其中的max即可。</p><p>对于每个字符，逐个取其后的字符，如果没有重复就加入子串，直到出现重复，从而计算出最长长度。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> start = s[i];</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = start;</span><br><span class="line">            <span class="keyword">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>这个算法已经可以通过测试了，但是时间复杂度不算好，O（n2）。</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i2.png" alt=""></p><h4 id="题解三："><a class="header-anchor" href="#题解三：">¶</a>题解三：</h4><p>在题解二的基础上进一步优化。</p><p>实际上题解二是有重复计算的部分的：对于第k个字符，其最长不重复子串可能到第rk个字符。那么我们继续计算k+1个字符的最长不重复子串时，k+1到rk的字符子串是不会重复的，完全可以避免判断，直接从rk之后开始。所以只需要维护一个变量last，记录上一个字符最后的索引，下一次直接从last+1开始考虑，前面照搬即可。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=last;j++){</span><br><span class="line">                temp[j-i] = s[j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> maxlen = last - i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = last+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">            last = i + maxlen - <span class="number">1</span>; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>虽然时间复杂度还是O（n2），但是一定比上一个方法快。</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i3.png" alt=""></p><p>以上。</p>]]></content>
    
    
    <summary type="html">第三道leetcode，第一篇题解~</summary>
    
    
    
    <category term="算法学习" scheme="https://43.143.214.130/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="leetcode" scheme="https://43.143.214.130/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>《自监督对比预测编码》论文复现</title>
    <link href="https://43.143.214.130/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    <id>https://43.143.214.130/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-10-17T11:06:22.000Z</published>
    <updated>2022-10-18T07:06:05.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3><p>本篇文章旨在记录《用自监督的对比预测编码进行时间序列变化点检测》论文的复现过程。</p><p>由于本人习惯一边做实验，一边写报告记录，所以文章的撰写也是和实验同步进行的。因此对于能否复现实验成果，我没有很大的把握。但是就算是失败的尝试，也算是值得记录的。</p><p>该论文的阅读笔记见</p><blockquote><p><a href="http://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p></blockquote><h3 id="要求："><a class="header-anchor" href="#要求：">¶</a>要求：</h3><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i12.png" alt="i"></p><h3 id="正文：-v2"><a class="header-anchor" href="#正文：-v2">¶</a>正文：</h3><h4 id="1-代码获取"><a class="header-anchor" href="#1-代码获取">¶</a>1.代码获取</h4><p>由于是挑选容易找到源代码的论文进行复现，所以这一步并不困难，源码在GitHub上有。</p><blockquote><p><a href="https://github.com/cruiseresearchgroup/TSCP2">https://github.com/cruiseresearchgroup/TSCP2</a></p></blockquote><p>该仓库包含所用的三个数据集中的USC数据集。</p><h4 id="2-设定参数"><a class="header-anchor" href="#2-设定参数">¶</a>2.设定参数</h4><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i1.png" alt="i"></p><p>根据提示，程序运行需要设定输出路径和输入数据集等参数，提到这两者是必要的参数。</p><p>参数可以在PyCharm中设定。（USC是默认的数据集名称）</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i2.png" alt="i"></p><p>设定参数之后试着运行程序，报错，似乎是因为我的电脑没有GPU资源。</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i3.png" alt="i"></p><p><strong>初步判断应该是程序采取CUDA编程，但是我本机不支持</strong>，看看能不能修改吧。</p><p>后来多等了一会，发现进度条动了</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i5.png" alt="i"></p><p>看来是可以跑，只不过也许是因为CPU很慢，所以才显示红色。确实，毕竟也不是报错。</p><p>当然，我觉得可能和我把GPU的参数注释掉有关。但是我在整个代码中确实没有发现某个实验过程显式调用了GPU。主要也是<strong>我对tensorflow如何选择硬件支持的机制不太了解</strong>，也许是它会自主选择，不需要人为设置？</p><h4 id="3-改用CPU支持tensorflow"><a class="header-anchor" href="#3-改用CPU支持tensorflow">¶</a>3.改用CPU支持tensorflow</h4><p>这一步暂时没找到合适的解决方案，先放着，尝试结合论文理解代码吧。</p><p>（自适应了，不用改）</p><h4 id="4-理解代码"><a class="header-anchor" href="#4-理解代码">¶</a>4.理解代码</h4><h5 id="（1）预设置"><a class="header-anchor" href="#（1）预设置">¶</a>（1）预设置</h5><ul><li>读取外部参数，比如数据集路径，模型存储路径等等</li><li>设置模型参数，比如时间窗口的大小、批处理大小、迭代轮数等等</li><li>设置损失函数</li></ul><h5 id="（2）数据预处理"><a class="header-anchor" href="#（2）数据预处理">¶</a>（2）数据预处理</h5><ul><li>装载数据集，在自定义的DataHelper.py当中有一个load_dataset()函数，参数是数据集所在路径、数据集名称等。（直接完成了数据预处理）</li></ul><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i4.png" alt="i"></p><p>这当中load_hasc_ds和load_usc_ds都是第三方库的函数。</p><p><strong>但是这里颇为奇怪，根据代码，如果输入的数据集不是HASC和USC，程序就会报错，那么实验的雅虎数据集是怎么做的？</strong></p><p>自己加上打印数据，从而<strong>观察输入数据集是什么样的</strong>（学长提问）</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i6.png" alt="i"></p><p>以上信息基本可以反映输入数据集的情况了。</p><p>首先总的样本数是18687，其中异常点有1400，大概占比7.5%。</p><p>其中选择14949个样本作为训练集，占比80%（常见的比例）。</p><p>可以发现输入的数据分为两块，trainx和trainlbl，也就对应着时间序列和是否为异常的标签。</p><p>trainx的shape是（14949，200），代表着有14949个样本，维度是200维，代表着200个属性。</p><p>而trainlbl的shape是（14949，1），代表着14949个样本，每个样本对应1维的0/1值，代表是否为异常值。</p><p>因此输入的数据集的shape是（14949，201）。</p><p><strong>可以看看最初始的数据集长什么样</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i9.png" alt="i"></p><p>就是非常长的一串数据，应该是<strong>未经切分处理的时间序列数据</strong>。</p><h5 id="（3）构造特征编码器的基本结构"><a class="header-anchor" href="#（3）构造特征编码器的基本结构">¶</a>（3）构造特征编码器的基本结构</h5><p>TS-CP2方法的核心是编码器。这里主要定义其结构。</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i8.png" alt="i"></p><h5 id="（4）训练得到编码器"><a class="header-anchor" href="#（4）训练得到编码器">¶</a>（4）训练得到编码器</h5><p>训练的目的就是得到编码器的合适参数，也就是得到合适的编码器。类似于神经网络里的神经元的参数。</p><p><strong>过程采用对比预测编码（正样本集和负样本集的各种对比获取信息）</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i7.png" alt="i"></p><p>用CPU进行训练非常漫长，而且每轮迭代的用时迅速增加，第6轮迭代到第8轮迭代用时1小时，花了近两小时训练过程仅未完成8/1600，所以没能完成训练模型的过程。</p><p>根据代码可以发现，编码器输出的编码特征的大小是可以指定的参数，默认是10。意味着向编码器输入时间序列，每个时间点得到一个10维的特征编码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'--code'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>, <span class="built_in">help</span>=<span class="string">'size of encoded features'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="（5）进行测试"><a class="header-anchor" href="#（5）进行测试">¶</a>（5）进行测试</h5><h6 id="1）装载测试数据集"><a class="header-anchor" href="#1）装载测试数据集">¶</a>1）装载测试数据集</h6><h6 id="2）输入到特征编码器"><a class="header-anchor" href="#2）输入到特征编码器">¶</a>2）输入到特征编码器</h6><h6 id="3）根据特征编码计算余弦相似度"><a class="header-anchor" href="#3）根据特征编码计算余弦相似度">¶</a>3）根据特征编码计算余弦相似度</h6><h6 id="4）根据余弦相似度判断是否异常"><a class="header-anchor" href="#4）根据余弦相似度判断是否异常">¶</a>4）根据余弦相似度判断是否异常</h6><p><strong>如何计算异常分数？异常阈值是多少？</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_CPs</span>(<span class="params">sim, gt, name, train_name, metric=<span class="string">'cosine'</span>, threshold=<span class="number">0.5</span></span>):</span></span><br><span class="line">    <span class="comment">#if metric == "cosine":</span></span><br><span class="line">    <span class="comment">#    sim = _cosine_simililarity_dim1(h, f)</span></span><br><span class="line"></span><br><span class="line">    est_cp = np.zeros(sim.shape[<span class="number">0</span>])</span><br><span class="line">    est_cp[np.where(sim &lt; threshold)[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">    tn, fp, fn, tp = confusion_matrix(gt, est_cp).ravel()</span><br><span class="line">    f1 = f1_score(gt, est_cp)</span><br></pre></td></tr></tbody></table></figure><p>异常分数用余弦相似度衡量，异常的阈值也是需要指定的参数（默认就是0.5）。</p><p><strong>余弦相似度的相关知识：</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i10.png" alt="i"></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i11.png" alt="i"></p><p>但是阈值这一参数也是需要计算（正负样本集）得到的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold=epoch_wise_sim[-<span class="number">1</span>] - ((epoch_wise_sim[-<span class="number">1</span>]-epoch_wise_neg[-<span class="number">1</span>])/<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p>最终输出就是0/1序列，代表是否为异常点。</p><h5 id="（6）保存模型"><a class="header-anchor" href="#（6）保存模型">¶</a>（6）保存模型</h5><p><strong>结语</strong>：总体摸清了实验的思路，但是有的具体细节还没能理解，限于机器算力，未能完整复现实验。</p>]]></content>
    
    
    <summary type="html">尝试复现论文《用自监督的对比预测编码进行时间序列变化点检测》的实验成果</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="自监督" scheme="https://43.143.214.130/tags/%E8%87%AA%E7%9B%91%E7%9D%A3/"/>
    
    <category term="对比预测编码" scheme="https://43.143.214.130/tags/%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81/"/>
    
    <category term="论文复现" scheme="https://43.143.214.130/tags/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单的文献综述-阶段1</title>
    <link href="https://43.143.214.130/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/"/>
    <id>https://43.143.214.130/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/</id>
    <published>2022-10-12T02:23:23.000Z</published>
    <updated>2022-10-12T03:36:24.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="论文篇目"><a class="header-anchor" href="#论文篇目">¶</a>论文篇目</h3><p>最近看的三篇论文信息如下图：</p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i1.png" alt="i"></p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i2.png" alt="i"></p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i3.png" alt="i"></p><p>三篇论文阅读笔记的链接如下：</p><blockquote><p><a href="https://yangyy.top/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p><p><a href="https://yangyy.top/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《云系统的跨数据集时间序列异常检测》个人笔记 | Yangyy’s Life</a></p><p><a href="https://yangyy.top/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《微软公司的时间序列异常检测服务》个人笔记 | Yangyy’s Life</a></p></blockquote><h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>这三篇文章的共同核心就是<strong>时间序列异常检测</strong>，虽然都是异常检测，但是实际还是有一定差别。前两篇是“<strong>Anomaly Detection</strong>”，第三篇是“<strong>Change Point Detection</strong>”，前者是异常检测，后者是变化点检测。异常检测即“不合群”的点，变化点检测就是过渡的点。不过过渡点通常也是“不合群”的点。</p><h3 id="对于检测方法的预期"><a class="header-anchor" href="#对于检测方法的预期">¶</a>对于检测方法的预期</h3><p>三篇论文大致都表达了希望检测方法<strong>准确、高效、通用</strong>以适应工业界的需求。</p><h3 id="遇到的困难"><a class="header-anchor" href="#遇到的困难">¶</a>遇到的困难</h3><p>当前的检测方法主要分为<em>传统统计模型、监督学习模型、无监督学习模型</em>。</p><p>如果数据集的时间序列有足够数量的标签，监督学习（CNN等）其实效果很好。但是在工业界，需要检测的数据集很庞大，手工标记非常困难，所以很少有直接采用监督学习进行预测的。</p><p>那么传统统计模型和无监督学习模型虽然不需要手工标记数据，但是实验的效果并不理想。</p><p>在”自监督对比预测编码“文章中分析到，对于变化点的检测，传统的统计模型比如根据统计学成本函数最优化，选择合适的变化点（个人的理解就是类似于分段最小二乘法、动态规划）。而且通常是侧重于某些属性/维度。</p><h3 id="提出的新方法"><a class="header-anchor" href="#提出的新方法">¶</a>提出的新方法</h3><p>三篇文章提出的新方法可以概括为“自监督对比预测编码”、“跨数据集检测”、“频谱残差+CNN”。</p><p>其实我个人感觉就是尽量贴近监督学习，通过不同的方式，在减少标记数据成本的条件下，达到监督学习的效果。</p><h4 id="“自监督对比预测编码”——变化点检测"><a class="header-anchor" href="#“自监督对比预测编码”——变化点检测">¶</a>“自监督对比预测编码”——变化点检测</h4><p>基础的思路：根据历史数据预测未来数据，如果现实数据和预测数据差别很大，说明变异点出现了。但是这种方法通常是针对一个属性，而且和统计分布有关。</p><p>自监督对比预测编码：自监督是检测器对每个时间窗口<strong>生成一个表征编码</strong>（类似于自动标记），预测时就根据时间窗口之间的余弦相似度来判断变化点。</p><p>关键就在于<strong>表征的生成</strong>。采用自动回归的深度卷积神经网络学习编码表示。这里对比预测需要学习相似和相异的属性，因此有正样本和负样本之分，正样本是相似的样本集，负样本是相异的样本集。所以会采集很多连续的时间窗口，子集内部就是正样本对，子集之间互为负样本。设置相应的损失函数即可。</p><h4 id="“跨数据集检测”"><a class="header-anchor" href="#“跨数据集检测”">¶</a>“跨数据集检测”</h4><p>因为监督学习效果好，但是标记成本高，无监督效果又不好。所以可以想到跨数据集检测的方法，基本思路：我们有一些历史的、有标记的数据，而且来自不同领域会有大量的标记数据集，但是因为领域有差别，所以预测新的数据集的时候不能用。但是并不是完全不能用，比如说<strong>触类旁通</strong>的思想，就是在这些<strong>已有数据集上学习到的“知识”，能不能迁移到目标数据集上</strong>。直接迁移肯定不行。</p><p>迁移学习+主动学习的方法可以。</p><h5 id="迁移学习"><a class="header-anchor" href="#迁移学习">¶</a>迁移学习</h5><p>对已有标签的源数据集和没有标签的目标数据集分别进行<strong>特征的归纳</strong>。特征归纳需要考虑三方面：统计特征、预测误差（多个模型）、时间序列（前后关联）。</p><p>归纳之后，对源域进行K-means聚类，因为源数据集可能是不同领域数据集的汇总。然后把部分的目标数据集作为样本，根据欧式距离分配到不同子源域。（<strong>这里的问题就是目标数据集不是应该是一类数据吗</strong>？）</p><p>此后，源域的特征还需要对目标域进行一次对齐（转换矩阵）。</p><h5 id="主动学习"><a class="header-anchor" href="#主动学习">¶</a>主动学习</h5><p>主动学习的思想就是利用一些目标域的数据进行<strong>人为标记，训练源域的检测器</strong>。为了尽量<strong>选择少并且有代表性的数据</strong>，根据<strong>不确定性和上下文多样性</strong>进行选择。</p><p>迁移学习+主动学习得到分类器。最终检测目标数据即可。</p><p>作者还控制变量对比了主动学习、迁移学习的组件的工作效果，都很好。</p><h4 id="“频谱残差-CNN”"><a class="header-anchor" href="#“频谱残差-CNN”">¶</a>“频谱残差+CNN”</h4><p>首先是希望用无监督的方法得到比较好的检测器。</p><p>受视觉显著性检测领域的启发（用光谱残差检测照片或者场景中突出的部分），实际上异常点在时间序列曲线当中也是视觉中突出的部分），所以采用SR进行识别。</p><h5 id="SR"><a class="header-anchor" href="#SR">¶</a>SR</h5><p>通过频谱残差分析，可以把时间序列转换成显著图/突出图。</p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i4.png" alt="i"></p><p>异常点就会更加突出。</p><p>在这里其实可以简单根据阈值进行异常点识别了。但是为了更好的效果还是加上CNN。</p><p>提到了添加预测点。</p><h5 id="CNN"><a class="header-anchor" href="#CNN">¶</a>CNN</h5><p>因为SR模型已经可以简单输出有标签的数据集了，所以再加上CNN会更好。</p><p>首先人为地注入几个异常点。</p><p>再CNN。</p><h5 id="评价指标"><a class="header-anchor" href="#评价指标">¶</a>评价指标</h5><p>允许检测延迟。（有最小时延）</p><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><p>三篇论文提出的方法都比各自提到的基准方法有了可以说是全面的提升。</p>]]></content>
    
    
    <summary type="html">简单总结梳理一下最近阅读的三篇论文。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>《微软公司的时间序列异常检测服务》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-12T01:51:36.000Z</published>
    <updated>2022-10-12T04:43:24.322Z</updated>
    
    <content type="html"><![CDATA[<p>第三篇论文，原名《Time-Series Anomaly Detection Service at Microsoft》，译作《微软公司的时间序列异常检测服务》，CCF A。方法是光谱残差（SR）+CNN。</p><p>具体见笔记。</p><div class="row">    <embed src="./TSADMicrosoft.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第三篇论文，原名《Time-Series Anomaly Detection Service at Microsoft》，译作《微软公司的时间序列异常检测服务》，CCF A。方法是光谱残差（SR）+CNN。&lt;/p&gt;
&lt;p&gt;具体见笔记。&lt;/p&gt;


	&lt;div class=&quot;</summary>
      
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="卷积神经网络" scheme="https://43.143.214.130/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>不一样的页脚设置</title>
    <link href="https://43.143.214.130/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/"/>
    <id>https://43.143.214.130/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-10-11T02:06:35.000Z</published>
    <updated>2022-10-11T12:59:00.568Z</updated>
    
    <content type="html"><![CDATA[<h4 id="碎碎念"><a class="header-anchor" href="#碎碎念">¶</a>碎碎念</h4><p>星期天发现了Butterfly主题的美，于是决定换主题。没想到这一换就是三天。。。</p><p>很难去评价Butterfly主题的作者写的文档，可以说瑕不掩瑜吧，但是这个瑕还是挺搞人心态的。好的地方就是安装文档有一条很清晰的线，你可以按着它一步一步美化你的网站，作者可以说比较费心了。但是就我体验到的不好的地方，比如它的完备性甚至不如很多用户自己写的配置文档，还有就是有的地方教学过于潦草了。</p><p>以及，不知道是不是版本的问题（4.4.0），遇到了一些bug，比如说导航栏不能用自己定义的名字（比如中文），否则会出现中英两个导航栏，还有的bug下文会说。</p><h4 id="关于更换主题时评论系统的移植"><a class="header-anchor" href="#关于更换主题时评论系统的移植">¶</a>关于更换主题时评论系统的移植</h4><p>前面挺多操作都是按部就班，或者因为已经过去一两天我也没有动力回顾了。</p><p>觉得值得一讲的就是评论系统的移植吧。</p><p>如果是初次配置评论系统，读者自行利用搜索引擎就好，这里主要说说移植。</p><p>大部分人评论系统的数据库都是leancloud上的某个应用，在主题配置文件中绑定AppId和AppKey即可。</p><p>但是我一直不知道是不是允许移植。</p><p>Butterfly的文档里面介绍到配置评论系统好像只是介绍了配置文件开启valine。甚至没有教如何配置数据库。没有数据库怎么存储评论信息？也许作者默认大家自学了吧。</p><p><strong>经验证，不同主题之间，评论系统可以移植。butterfly的配置文件也绑定对应的leancloud应用即可</strong>。</p><h4 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h4><p>先看一下页脚的初始效果和最终效果吧。</p><p>初始效果：</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i1.png" alt="i1"></p><p>最终效果：</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i3.png" alt="i1"></p><p>感觉变化还是蛮大的吧。没想到这么小的一块做了一天。。。</p><h5 id="1-背景透明"><a class="header-anchor" href="#1-背景透明">¶</a>1.背景透明</h5><p>这一步就把丑陋的蓝色板块去掉了，可以看见我的主页背景图了。</p><h5 id="2-去掉Hexo和Butterfly支持"><a class="header-anchor" href="#2-去掉Hexo和Butterfly支持">¶</a>2.去掉Hexo和Butterfly支持</h5><p>虽然说这样不太好，毕竟人家提供了技术支持。但是为了美感，还是决定去掉。</p><p>把图中第二个if大段注释掉就好了，看懂代码应该就知道了。</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i4.png" alt="i"></p><h5 id="3-修改起止时间"><a class="header-anchor" href="#3-修改起止时间">¶</a>3.修改起止时间</h5><p>这个在上面那个图的第一个if，在主题配置文件的footer底下把owner的相关信息（包括since）修改一下。</p><p>我这里的代码思路应该和初始配置文件不一样，我的思路是首先起始时间是我建站时间，如果建站时间不到一年，就只显示当前年份，如果超过一年就显示起止年份。</p><p>应该看得懂代码。</p><h5 id="4-自定义语句"><a class="header-anchor" href="#4-自定义语句">¶</a>4.自定义语句</h5><p>这个网络说的很多，不多说了。</p><p>可以发现到目前为止很顺，但是我最喜欢的就是那句“本站已安全允许…”，做完这个我这一阶段就结束了。</p><p><strong>吐槽一下，官方文档不教这个。。。</strong></p><p>利用搜索引擎吧。</p><p>但是一般人家会这么教你。</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i5.png" alt="i"></p><p>好像大部分人都是这么做的，配置文件你找到这个位置就会发现有时间格式说明，但是很抱歉，按照这么做无法显示。</p><p>我以为是其他地方还要改，查了半天，发现都不是。</p><p>那可能就是bug了，毕竟有前车之鉴（导航菜单）。</p><p>应该不是我其他地方改错了，因为我复制了官方配置文件，只修改这里，也没用。</p><p>但是我很想要这个功能。</p><p>想到自己写一个，前面那个footer.pug文件显然就是前端页面了，直接代码写应该没问题。</p><p>但是问题在于，我不会这个代码。</p><p>只好Google，疯狂翻，然后找到了一个博主（谢谢博主！）</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i6.png" alt="i"></p><p>于是采纳，但是发现运行时间计算错了，89算成了58（刚好一个月）。时分秒倒是没错。</p><p>**但是看代码比写代码容易呀。**不会这个语言不代表不能debug。于是顺了一下思路：很简单，就是获取当前时间和起始时间，然后一减，先整除365天的时间，有多就是年；再整除天数（因为不显示月份）；再整除时分秒…</p><p>不详细说了，应该都看得懂。</p><p>很奇怪，逻辑没错呀。</p><p>于是猜测是getTime获取当前时间出问题了，要是getTime是准的，为什么要手动加上8小时的时间，于是猜测getTime不准。</p><p>所以，好吧，手动算差了多少，补上。。。。。</p><h5 id="弊端"><a class="header-anchor" href="#弊端">¶</a>弊端</h5><p>这样做弊端很明显的，首先没考虑闰年，那么每四年就会差1天，当然也有可能他们使用主题提供的也没考虑闰年。</p><p>还有就是这个getTime到底怎么回事，他这个误差是稳定31天8小时，还是不稳定的，比如取决于每个月多少天（因为前面说了刚好差一个月）。</p><p>以上隐患都可能导致出现误差，但是大体算是实现了。</p><p>很累，不想深究了，先这样吧，有空再深究。</p><p>顺便，把这个bug在Github上提供给作者了。</p><p>有什么你遇到的bug，我没讲清楚，欢迎联系我。急着去健身，脑子也累了，也烦了。</p><p>以上。</p>]]></content>
    
    
    <summary type="html">今天有点被完善网站搞心态了。。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用代理反而不能克隆GitHub的资源？</title>
    <link href="https://43.143.214.130/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/"/>
    <id>https://43.143.214.130/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/</id>
    <published>2022-10-09T10:25:18.000Z</published>
    <updated>2022-10-09T10:54:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>今天想给博客换个主题，于是开始操作。</p><p>第一步获取主题资源就卡了。因为各类主题的资源基本都在Github上，而GitHub又是国外的网站，因此我就挂上了VPN。命令行输入</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></tbody></table></figure><p>结果出bug了，几次都报错：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="string">'https://github.com/jerryc127/hexo-theme-butterfly.git/'</span>: OpenSSL SSL_read: <span class="keyword">Connection</span> was <span class="keyword">reset</span>, errno <span class="number">10054</span></span><br></pre></td></tr></tbody></table></figure><p>难崩，遇事不决，CSDN之。</p><p>看到了一些解决方案。</p><p>有这样说的：</p><p><img src="/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/i1.png" alt="image1"></p><p>也有这样说的：</p><p><img src="/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/i2.png" alt="image2"></p><p>这些方法我都试了试，没什么用。</p><p>到更新git的步骤，我发现更新git也获取不到网址了，觉得也许又是代理的问题。于是关了VPN，就一切正常了。</p><p>暂时想不通为什么开着VPN获取不到Github的资源，关了就可以。也许是端口问题？</p>]]></content>
    
    
    <summary type="html">代理真神奇，连着两天碰到问题了。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
    <category term="代理（科学上网）" scheme="https://43.143.214.130/tags/%E4%BB%A3%E7%90%86%EF%BC%88%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%89/"/>
    
    <category term="Git" scheme="https://43.143.214.130/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>代理出问题了</title>
    <link href="https://43.143.214.130/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/"/>
    <id>https://43.143.214.130/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/</id>
    <published>2022-10-08T02:06:21.000Z</published>
    <updated>2022-10-08T02:52:03.849Z</updated>
    
    <content type="html"><![CDATA[<p>如果你也出现了“<strong>使用代理不能上网，不用代理却可以上网</strong>”的问题，也许这篇博客会对你有帮助。（<strong>本篇文章不涉及计算机网络的知识</strong>，稍微了解一些计算机概念的同学即可阅读。因为本人计算机网络课程也还没学到什么东西，我自己是可以理解的）</p><p>今天打开电脑正要写作业，打开浏览器发现网络无连接，大概显示的是代理出问题或者防火墙之类的。但是看网络连接（校园网）是正常的。于是手机搜索了这个问题。网络上的指导是设置—&gt;网络和Internet—&gt;代理中，<strong>关闭手动设置代理</strong>。这一步的原理很简单，因为我<strong>没有挂VPN，但是电脑设置却开启了代理</strong>，那我自然没法上网，因为找不到代理嘛。</p><p>于是关闭手动设置代理，<strong>开始上网，没问题</strong>。</p><p>但是这次写作业有翻墙的需要，所以就需要挂VPN，于是像往常一样<strong>挂上VPN，网络又挂了</strong>，显示无法连接。（其实最后发现原因很简单）</p><p>网络上的教学只能说也是鱼龙混杂。</p><p>有的还是教你关闭手动开启代理，这个我试了没有用，因为关闭代理设置之后虽然可以上网，但是挂上VPN之后代理会自动打开，还是出问题。</p><p>我以为是我电脑出问题了。因为有很多人说是如果没有关VPN就关闭电脑，开启电脑的时候会自动寻找代理，就会出问题。但是这不是我问题的答案。</p><p>我一开始以为：电脑设置里面的代理和我挂VPN的代理是两条路，理想状态应该是挂了VPN但是电脑没开代理设置，所以我以为我的电脑出问题了会自动打开代理，我应该想办法关闭这个设置。当然这是错误的。</p><p>更有甚者说是还要打开注册表删除一些东西，还好我够懒，没有这么做。</p><p>看到了另一条路：打开IE浏览器，打开工具栏，选择Internet选项，选择连接栏，打开局域网设置，把代理服务器那边打开。（如下图所示）</p><p><img src="/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/i1.png" alt="image1"></p><p>还说其他浏览器也一样，都可以通过IE浏览器设置，这里我就觉得不靠谱。凭什么IE浏览器可以设置其他浏览器。我看着Internet选项也很眼熟，想想这不是设置里面那个嘛。于是直接打开菜单栏搜索Internet选项，就能打开这个设置了。</p><p>所以说我感觉这里的笔者根本不知道为什么要这么做，实际上打开Internet选项和IE浏览器有什么关系呢？搞得评论区很多人说没有IE浏览器怎么办，误人子弟！</p><p>回归正题，这样打开设置也没用，还是不能上网。</p><p>多试了几次我发现VPN、手动代理设置、Internet选项里的局域网设置其实是一体的，打开了VPN就会打开后两者，关闭了后两者VPN自然没有用。总的来说就是<strong>你的VPN实际上和你电脑中关于代理的设置是一体的，而不是我原本以为的电脑代理是正规渠道、我的VPN是旁门左道，所以互相独立</strong>。</p><p>所以回归网络上提供的两种方案，方案一针对的就是你没有挂VPN但是电脑却开了代理设置，这肯定是不能上网的，所以需要关闭代理设置，但是这就不能翻墙了。方案二针对的是你挂了VPN，但是电脑没有开代理设置，这自然也会出现网络问题。</p><p>但是现在我是开了VPN也设置了代理，却无法上网。</p><p>这时候我觉得可能是VPN的问题，于是卸载重装了clashforwindows，想要重新配置VPN。</p><p>重装之后发现保留了配置，但是我想重新配一遍。绑定订阅地址是没什么问题。**选择代理节点这边发现问题了，我选择的代理服务器停用了！**于是换了一个节点，网络正常了！</p><p>所以我的问题是代理服务器已经挂了。所以总结一下：我如果不挂VPN、电脑不设置代理，那么我可以在国内正常上网；我如果不挂VPN、电脑设置代理，自然出bug（方案一）；我如果挂了VPN，电脑不设置代理，也出bug（方案二）；我如果挂了VPN，电脑也设置代理，但是我的代理服务器挂了，我自然也挂了，但是换成正常服务器就可以科学上网了。</p><p>通过这件事，体会到遇到问题不能盲从网络上的解决方案，实际上网络上的人水平不一定高，他们也可能只是碰巧解决了问题，但是不知道原理，这种帖子阅读是没有好处的，不懂原理的解决方案，也许只是症状一致，照着改运气不好会越改越坏。<strong>一定要有自己的判断</strong>。</p><p>当然了，也不能闭门造车，不通过网上这些帖子的指导和个人的试错，我也不可能靠自己总结出这篇博客。</p><p>也许会觉得自己真傻，要是一开始就看看代理节点就好了。但是其实这样也不坏，虽然折腾了一上午，但是对于代理也有了更深刻的认识，挺好的。</p><p>有问题欢迎评论区交流~</p>]]></content>
    
    
    <summary type="html">使用代理不能上网，不用代理却可以上网？</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="代理（科学上网）" scheme="https://43.143.214.130/tags/%E4%BB%A3%E7%90%86%EF%BC%88%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>《云系统的跨数据集时间序列异常检测》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-06T08:23:35.000Z</published>
    <updated>2022-10-12T04:45:09.038Z</updated>
    
    <content type="html"><![CDATA[<p>最近读的这篇论文原名《Cross-dataset Time Series Anomaly Detection for Cloud Systems》，也是一篇CCF A类论文。译作《云系统的跨数据集时间序列异常检测》，应用对象是云系统上的大规模数据集，目标是<strong>时间序列异常检测</strong>，提出的最有价值的思想是<strong>跨数据集检测</strong>。</p><p>以下pdf是个人阅读笔记，欢迎交流指正。</p><p>注：pdf暂时只支持PC端阅读。</p><div class="row">    <embed src="./CrossdatasetAD.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">开题阶段读的第二篇论文~</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Next主题下为文章添加pdf文件</title>
    <link href="https://43.143.214.130/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/"/>
    <id>https://43.143.214.130/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/</id>
    <published>2022-10-03T10:47:06.000Z</published>
    <updated>2022-10-03T11:32:13.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a class="header-anchor" href="#前言：">¶</a>前言：</h4><p>其实之前就有想过应该给自己的博客添加<strong>在文章中附带文件的功能</strong>，当时想过如果有一些笔记可以直接放到博客的文章里，不过一直没有刚需就没有动手。</p><p>最近刚参与的科研项目在文献调研阶段，读了一些论文记了一些笔记，想着可以分享到博客上来（不过这种行为是不是允许，后续还要问问实验室的师兄，不过暂时本博客也没有公开，所以先放着）。</p><p>其实添加这个功能很简单，网络上的教程也很多，但是热度高的基本都不完备，跟着做了很多遍都没成功，一度让我怀疑是不是我的Hexo版本不支持这个功能。不过后来改用Google搜索，看了很多篇帖子之后，完成了任务，在这里进行总结与梳理。</p><p><strong>注意：本人使用的是Hexo的Next主题，其他主题也许有不同，但是应该可以参考。</strong></p><h4 id="正文："><a class="header-anchor" href="#正文：">¶</a>正文：</h4><h5 id="1-下载相关插件"><a class="header-anchor" href="#1-下载相关插件">¶</a>1.下载相关插件</h5><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></tbody></table></figure><p>有的方法这一步就告诉你可以使用这个插件的功能了</p><p>说是按照</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 本地文件地址/网页链接 %}</span></span><br></pre></td></tr></tbody></table></figure><p>这个格式就可以展示pdf了。</p><p>有的人可能会成功，但是从逻辑上来说，这样显然不对。</p><p>对于我使用的Next主题来说，默认的配置是禁用pdf，所以需要对主题文件配置进行修改。</p><h5 id="2-修改主题配置文件"><a class="header-anchor" href="#2-修改主题配置文件">¶</a>2.修改主题配置文件</h5><p>在根目录的themes文件夹下，打开你的主题文件夹，再打开_config.yml文件。</p><p>搜索pdf，找到如下图所示的位置：</p><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i1.png" alt="i1"></p><p>这里的enable默认是false，也就是不支持显示pdf文件，需要改成true。不然再怎么设置都显示不了pdf文件。</p><p>还需要注意，<strong>我的配置文件当中默认只设置了height</strong>，即显示区域的高度。如果不做任何修改，那么我hexo s的时候显示还是正常的，但是hexo d之后显示区域宽度极小，非常奇怪。</p><p>所以在这里，<strong>建议大家添加一条宽度设置</strong>，如下图所示：</p><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i2.png" alt="i2"></p><p>（这个高度和宽度的参数取决于个人喜好）</p><h5 id="3-顺便说一下便于文件管理的功能"><a class="header-anchor" href="#3-顺便说一下便于文件管理的功能">¶</a>3.顺便说一下便于文件管理的功能</h5><p>在我们写一篇文章的时候，可能需要调用各种各样的图片、文件等。</p><p>如果不进行这一步的设置，也许你写一篇文章，通常会先</p><figure class="highlight gauss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="built_in">title</span></span><br></pre></td></tr></tbody></table></figure><p>于是生成一个以title为名的md文件。</p><p>当然，这样你也可以调用图片、文件，按照制定格式输入图片、文件的路径即可，但是这样的文件管理显得杂乱无章。</p><p>所以，可以做如下修改。</p><p><strong>打开站点的配置文件（不是主题的配置文件）</strong>，找到post_asset_folder，设置为true。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>这一修改的意义就是，在你hexo new一篇文章的同时，在文章所在的文件夹同时创建一个与文章的同名的文件夹。你可以把该文章需要的图片、文件放在该文件夹中，再进行调用。（这样是不是就规整了很多呢）</p><h5 id="4-调用pdf文件的格式"><a class="header-anchor" href="#4-调用pdf文件的格式">¶</a>4.调用pdf文件的格式</h5><p>本地文件</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> pdf文件路径 %}</span></span><br></pre></td></tr></tbody></table></figure><p>网络文件</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 网络文件url %}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="5-效果显示"><a class="header-anchor" href="#5-效果显示">¶</a>5.效果显示</h5><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i3.png" alt="i3"></p><h5 id="6-注："><a class="header-anchor" href="#6-注：">¶</a>6.注：</h5><p>有两点想提醒大家</p><p>（1）虽然有的朋友用的是Typora这种及时显示效果的编辑器，但是调用pdf文件并不会像调用图片一样，在编辑的时候就显示效果，你看到的只是一行代码。</p><p>（2）这种方法目前只支持PC端阅览，不支持手机端。（不过就这样将就吧）</p>]]></content>
    
    
    <summary type="html">曲折的为文章添加pdf文件的历程。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>《用自监督的对比预测编码进行时间序列变化点检测》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-03T08:09:46.000Z</published>
    <updated>2022-10-06T08:15:38.095Z</updated>
    
    <content type="html"><![CDATA[<p>该论文原名《Time Series Change Point Detection with Self-Supervised Contrastive Predictive Coding》，是CCF A类论文。译作《用自监督的对比预测编码进行时间序列变化点检测》。个人阅读主要是为了了解<strong>异常检测</strong>的相关方法。</p><p>由于担心侵权问题，不能展示原文，大家若有需要，直接利用Google学术搜索即可，很容易获取。</p><p>以下为个人笔记，欢迎交流和指正。</p><div class="row">    <embed src="./TSCPD.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">分享该论文（CCF A类）的个人阅读笔记。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="自监督" scheme="https://43.143.214.130/tags/%E8%87%AA%E7%9B%91%E7%9D%A3/"/>
    
    <category term="对比预测编码" scheme="https://43.143.214.130/tags/%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>转专业终于尘埃落定</title>
    <link href="https://43.143.214.130/2022/09/27/%E8%BD%AC%E4%B8%93%E4%B8%9A%E7%BB%88%E4%BA%8E%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A/"/>
    <id>https://43.143.214.130/2022/09/27/%E8%BD%AC%E4%B8%93%E4%B8%9A%E7%BB%88%E4%BA%8E%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A/</id>
    <published>2022-09-27T02:29:46.000Z</published>
    <updated>2022-09-27T06:57:04.784Z</updated>
    
    <content type="html"><![CDATA[<p>“转专业终于尘埃落定”这句话可以说是不那么准确，毕竟课程替代还差一门暑期实训（计网还没有登分）。不过虽然这门课是5学分任务量，但是由于开课在暑假，所以能不能替代我倒持平常心对待，所以也算是尘埃落定了吧。</p><p>转专业的顺利结束对我来说标志着两条“焦虑线“的结束。</p><h4 id="转专业焦虑线"><a class="header-anchor" href="#转专业焦虑线">¶</a>转专业焦虑线</h4><p>第一条”焦虑线“应该始于今年的三月份，当时大二下学期刚开始，在虽然经过一学期努力已经从53进步到了41，身处保研名额在30左右的计科，又身无任何奖项的我，保研的希望还是非常渺茫，但是希望渺茫又如何，还是得尽力争取。当时真是一想到自己的处境就特别难过和焦虑，”难道努力三年最后还是要考研吗？考研考不上怎么办？…”。当时只能劝自己别想，因为中学时代我就明白了，焦虑和空想是不能解决问题的，反而会影响自己解决问题，但是我同时也明白我是无法控制自己完全不想的。所以就坦然接受我会焦虑这件事，不因为焦虑了而焦虑，同时尽量避免去想自己的处境，闷头苦干便是。再加上当时课业真是极其繁重，想想当时的处境都还是觉得艰难。</p><p>在一次和小刘的闲聊当中提到了”转专业到软件“这个当时看起来极其荒诞的想法，当时觉得也就是开开玩笑罢了。不过虽然只是开玩笑，但是无聊的时候还是要到了软件工程的培养计划。对比了一下自己的培养计划，发现在计算机学的课程几乎可以说是完全覆盖软件的课程，感觉有了可行性，于是想到了课程替代。当时觉得课程替代是一件很难办的事情，所以也就抱着试试的心态问了软件学院教学班的王来忠老师。记得是在一个午觉刚醒的下午，王老师告诉我应该可以替代，甚至学分低的也能替代学分高的（课时不少的情况下），并表示对我转专业的欢迎。当时看到消息真是喜出望外，转专业这件事有了可行性。</p><p>能转专业到软件了，这对当时的我来说简直像梦一样。不像计科这样卷的学习环境、更合理的课程安排、更专注于代码…。不过焦虑的人总是有得焦虑。一方面强迫症的我纠结于”应该可以“这句话，虽然我知道教学办的老师对于这件事也只能给个大概的答复，但是对我来说确实确定的答复才能避免转到软件需要补大量的课甚至不如留在计科的情况。对我来说，延毕一年学已经学过的课程，倒不如考研。记得很清楚，当时和小刘说就怕是给我一个很好的梦，最后还是要梦醒，继续留在计科，小刘安慰我会好的。另一方面我是一个常常怀疑自己的人，我担心自己因为转专业到软件的美好处境而松懈结果最后确实留在计科，处境更糟糕了…</p><p>当把想问的事情问清楚之后就决定不再纠结转专业的事情，专心提高在计科的学分绩。毕竟提高在计科的学分绩，不管对于通过转专业考核、还是争取在计科保研，又或是转专业课程替代后排名更进一步，都是十分必要的。</p><p>因此差不多到五月，也只是偶尔纠结一下，不太影响在计科的学习。其实知道很有可能可以转专业之后，我的心态变好了很多，感觉好像有了退路一般，在计科学习也不焦虑了，就算最后没转，应该对我都是有好处的。</p><p>五月底横生变故，他们闹着要延期考试回家，延期考试就意味着要延期转专业，这对我来说实在太影响规划了，甚至可能让我没法转专业。再加上当时还有暑期学校的纠结，一度以为转专业要失败了。不过还是要努力寻求改变吧。于是向教务处副处长林锴老师写了几封信，表达了关于大二年级提前转专业的合理性，老师也认为合理，并同意推动，甚至还推动成功了，说在八月中旬考核。不过最后还是被部分学院拒绝了，定位开学两周之后转专业。</p><p>于是就是令人死亡的考试周。</p><p>考试周结束，在计科排名到了29，19.7%，也算很有希望保研了。但是还是决定转专业到软件。</p><p>考试周之后还在计科上了不到两周的课，才转到软件学院来。</p><p>记得转专业面试的前一晚，听一位和我有同样想法的计科同学问了于婷老师能否课程替代，答曰低分不可替代高分，当时一度以为又可能要失败了，当时又联系不上王来忠老师，特别着急。但是在面试的上午，找到了学校负责课程替代的老师，得知低分可以替代高分，决定权在学院之后彻底放松。在面试成功之后询问了新的教学办老师沈老师，她也表示可以课程替代，于是就决定转专业了。</p><p>转专业考核分数是全场最高，还不错。就差课程替代了。</p><p>不过课程替代也是一拖再拖，一开始以为面试结束就能替代，结果要调整完学籍。以为调整完学籍就可以替代，结果要选完课。只好苦苦等到26上午马上选了课之后提交申请。过程出奇的顺利。当初以为课程替代要找每一门课的双方教师签字，实际上教务老师几乎没怎么审核就通过了。（不过也是软件学院的老师放的宽，计科的课程替代可没这么容易）。等到学校也审核通过之后，看着两排绿色的通过字样，我的心终于放下了。</p><p>等了一天之后，向于婷老师查了成绩，89.79，比在计科还高了0.05，专业排名第五。</p><p>转专业终于尘埃落定了。</p><h4 id="暑期焦虑线"><a class="header-anchor" href="#暑期焦虑线">¶</a>暑期焦虑线</h4><p>这条线在其他帖子也说过了，就不再多说。大概就是从暑假开始，要忙论文、报告、大作业结课，要参加暑期实训，要学车，要准备开学考，要准备转专业，事情一件压着一件，每一件都必须成功。当时真的觉得很焦虑，八月底的时候很想一下子跳到九月底来看看，我成功了没有。当时焦虑的时候就和自己说”给自己一点时间“，耐心地一件一件事解决清楚。</p><p>于是乎，大作业结课的并行拿了99，论文结课的毛概拿了91，暑期实训完美结束，学车也速通拿证，开学考基本考得都很好属于成绩最好的一个学期，eamis上学分绩直接到了90.02，转专业也成功且顺利，也补上了没在软件上的课。</p><p>想到这些，我好是骄傲，感觉我的人生好久没有某段时间这么成功了。从竞赛到高考到二次选拔到此前的考试，感觉做什么都不能成功，让我觉得努力不一定能成功，所以我付出努力也不敢期待回报。不过还是要感慨，塞翁失马焉知非福，也正是这一次又一次地失败，才让我告别了物理。这次，这一段时间，努力真的得到了回报，我的焦虑、我的不断麻烦老师、我的熬夜，都得到了回报。</p><p>不过成功不能仅归功于自己。转专业成功离不开贤惠女友小刘刘的支持、安慰、建言献策，也离不开众多老师（谢茂强老师、林锴老师、王来忠老师、沈舒尹老师）的帮助，还有家里人（姐姐、爸妈）的支持。</p><p>不过也不能因为短暂的成功就得意忘形，高中会失败，也是因为自视甚高，太飘了。在软件学业压力小，老师不push，处境也更好，更需要自觉自控。这学期的目标就是稳住第五，刷科研经历，准备美赛，多写代码。</p><p>好了，适当地自我对话很重要，但是我毕竟是个程序猿，不是文科生，文字适可而止。接下来就要开始努力学习咯。</p>]]></content>
    
    
    <summary type="html">为转专业而煎熬的半年终于结束了。</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
    <category term="自语" scheme="https://43.143.214.130/tags/%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
</feed>
