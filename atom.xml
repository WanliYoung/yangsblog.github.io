<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangyy&#39;s Life</title>
  
  <subtitle>这里是杨万里的生活</subtitle>
  <link href="http://yangyy.top/atom.xml" rel="self"/>
  
  <link href="http://yangyy.top/"/>
  <updated>2022-07-17T03:58:51.577Z</updated>
  <id>http://yangyy.top/</id>
  
  <author>
    <name>yangyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在hexo的文章中插入图片</title>
    <link href="http://yangyy.top/2022/07/17/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://yangyy.top/2022/07/17/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2022-07-17T03:30:27.000Z</published>
    <updated>2022-07-17T03:58:51.577Z</updated>
    
    <content type="html"><![CDATA[<p>一开始想的很简单，直接获取图片，然后paste到Typora上，在本地编辑的时候确实看着没问题。他的实际思路就是，把图片存储在C盘上Typora的数据文件夹中，然后可以本地读取到图片。</p><p>但是<code>hexo g</code>之后，在本地服务器上看，图片都显示不出来。</p><p>其实也挺正常的，博客在本地服务器的范围也就是yangyy这个文件夹，超出的范围是探索不到的，更不用说部署到云端了，更看不到了。</p><p>还是CSDN解决之，总结一下吧。</p><p>1.安装插件</p><p><code>$ npm install hexo-asset-image --save </code></p><p>2.更改站点配置文件（false改成true）</p><p><code>post_asset_folder: true</code></p><p><strong>这时候理论上就准备完成了</strong></p><p>3.hexo new ”example“</p><p>这时候就会在source/_posts文件夹下面产生对应的文章和对应的文件夹，把图片（比如image1.jpg）放到文件夹里面。</p><p>在文章中引用的格式：</p><p><code>![图片描述](./example/image1.jpg)</code></p><p>理论上这样就可以了，因为图片现在也在博客能检索到的范围之内了，但是试了一下还是不行。</p><p>4.打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><p>(不用仔细看代码，直接改就行)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line"><span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.<span class="title function_">shift</span>();</span><br><span class="line">  src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就没问题了，最终能在博客上显示图片。<strong>看看效果叭</strong>。</p><p><img src="/2022/07/17/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/example.png" alt="image"></p><p>以上。</p>]]></content>
    
    
    <summary type="html">记录一下怎么在hexo生成的文章中插入图片</summary>
    
    
    
    <category term="技术" scheme="http://yangyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="http://yangyy.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2022-7-16日记</title>
    <link href="http://yangyy.top/2022/07/16/2022-7-16%E6%97%A5%E8%AE%B0/"/>
    <id>http://yangyy.top/2022/07/16/2022-7-16%E6%97%A5%E8%AE%B0/</id>
    <published>2022-07-16T15:00:41.000Z</published>
    <updated>2022-07-16T15:13:12.766Z</updated>
    
    <content type="html"><![CDATA[<p>​        没有任务的一天。昨天就把小组作业的任务做完了（技术博客还没写完呢），等着组员完成其他部分的内容吧。</p><p>​        没有学习压力，就专心改善自己的博客，基本上已经做成自己满意的样子了，就这么用着也足够了，有时间再摸索吧。</p><p>​        似乎上午下午都在完善博客。</p><p>​        晚上吃了牛肉面，味道不错。接着去打球了，当初一起打球的人都不在身边了，似乎每群人在将乐的球场就只会待到这个年龄，然后离开。将乐的球场，似乎一直主要是初高中生和中年人。对于他们而言，似乎一旦脱离了学生身份，不管当初多热爱篮球，都会慢慢离开球场。似乎这么多，也只是代表我的猜想罢了。</p><p>​        身体还是不舒服，鼻音很重，感觉身体很上火，打球的时候感觉火在烧。</p><p>​        好消息是期待许久的毛概终于出分了，91，挺满足的吧，拉高了学分绩，3.5学分呢。查重率60%，之前一直挺担心的。在集市上看似乎是中上吧，还不错，毕竟马原73的阴影还在心里。</p><p>​        就剩一个并行了，目前几个平均分91.15，并行应该会好吧，我挺相信的。剩下的专业课，到时候努力复习咯。</p><p>​        好吧，今天就写这么多，也没什么其他的想法，继续加油！</p>]]></content>
    
    
    <summary type="html">继续培养写日记的习惯 &amp; 挺开心的一天</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="http://yangyy.top/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建博客的第二天</title>
    <link href="http://yangyy.top/2022/07/16/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://yangyy.top/2022/07/16/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2022-07-16T08:24:29.000Z</published>
    <updated>2022-07-16T09:09:44.251Z</updated>
    
    <content type="html"><![CDATA[<p>搭建博客的第一天只是创建了这么一个博客网站并且绑定了购买的域名。</p><p>今天改用Next主题的Gemini模式，在这个基础上完善了自己的界面，今天主要记录完善的过程。</p><p><strong>一.    添加搜索功能</strong></p><p><code>$ npm install hexo-generator-searchdb --save</code></p><p><strong>二.    添加关于、标签、分类模块</strong></p><p>​    1.创建标签、分类的页面</p><p>​    在根目录下输入：    <code>$ hexo new page about/tags/categories</code></p><p>​    在source文件夹下有了对应的页面</p><p>​    2.在每个页面对应的文件夹下有一个index.md文件，打开并编辑</p><p>​    <code>title: 关于/标签/分类</code></p><p>​    添加一行内容：    <code>type: &quot;about/tags/categories&quot;</code></p><p>​    这样新的页面就关联上了这些模块</p><p>​    3.前往主题配置文件_config.yml中，把menu中对应的注释去掉</p><p>​    4.在文章的开头部分加上</p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">  ...</span><br><span class="line">categories:</span><br><span class="line">  - cat1</span><br><span class="line">  - cat2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>​    即可。</p><p><strong>三.主题配置修改之后，本地有效但是网络端无效的解决</strong></p><p>​    1.找到next主题文件夹下Source文件夹下的lib文件夹，重命名为ywl</p><p>​    2.在主题配置文件_config.yml中找到Vendors，修改内容为：</p><p>​    <code>_internal: ywl</code>即可。</p><p>​    </p>]]></content>
    
    
    <summary type="html">越来越喜欢自己的博客了。</summary>
    
    
    
    <category term="技术" scheme="http://yangyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="http://yangyy.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2022/7/15 日记</title>
    <link href="http://yangyy.top/2022/07/15/2022-7-15-%E6%97%A5%E8%AE%B0/"/>
    <id>http://yangyy.top/2022/07/15/2022-7-15-%E6%97%A5%E8%AE%B0/</id>
    <published>2022-07-15T15:29:35.000Z</published>
    <updated>2022-07-16T07:57:21.304Z</updated>
    
    <content type="html"><![CDATA[<p>​        在博客写下第一篇日记。</p><p>​        上次坚持一段时间写日记还是2017年的夏天，和小刘交换着日记本，不知不觉都过去五年了，时间真快啊。</p><p>​        时间不多，随便记记流水账罢。</p><p>​        今天的学习任务是暑期学校项目的一部分，用tensorflow2.x完成字符识别的卷积神经网络（详见博客<strong>《第一个成熟的卷积神经网络——字符识别》</strong>，上午下午的时间就这样流逝，解决了许多bug，正确率最后也在98%左右，很开心、很满足。</p><p>​        晚上和小刘去了醉得意，还是觉得贵，两个人吃了￥120，不过菜挺好吃的。</p><p>​        <strong>晚上和小刘放了烟花！</strong></p><p>​        今天没有运动，生病了还没好，希望快点好起来！</p>]]></content>
    
    
    <summary type="html">博客的第一篇日记，简单的流水账。</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="http://yangyy.top/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个成熟的卷积神经网络——字符识别</title>
    <link href="http://yangyy.top/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/"/>
    <id>http://yangyy.top/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/</id>
    <published>2022-07-15T15:13:38.000Z</published>
    <updated>2022-07-17T03:19:04.532Z</updated>
    
    <content type="html"><![CDATA[<p>​        总算是开始了自己的第一篇技术博客。</p><p>​        也总算是大概弄懂了一些深度学习、神经网络、卷积神经网络的知识，能靠自己实现识别字符的卷积神经网络了。</p><p>​        今天时间所剩不多，可能写不完，写到哪算哪吧。</p><p>​        在大二下的《人工智能导论》这门课开始接触深度学习，学得一知半解都算不上，啥都没弄明白，甚至还要做神经网络的实验，本是作为启蒙课的目的也没有达到，反而起到了揠苗助长的效果，让人觉得深度学习、神经网络特别难。就我目前的理解而言，我绝不敢说深度学习、神经网络简单，毕竟现在科技前沿都还没将之完全征服。但是我可以说，理解深度学习、神经网络的基本概念绝对不难。实际上我到目前为止也只是看了吴恩达老师不到半小时的讲解就入门了神经网络，实训课李伟老师一上午左右的讲解也让我掌握了数字图像基本概念和卷积神经网络的思路。不得不抨击一下这门课的设立，我被老师和实验弄迷糊的时间完全可以入门深度学习了，况且还让我很长一段时间对深度学习、神经网络有些畏惧，如今看来，似乎”不过如此“（bushi）。</p><p>​        好吧，啰嗦了半天，好像都没时间写技术性的东西了。</p><p>​        这次的任务是把老师已经用tensorflow1.x写好的识别字符的卷积神经网络改成用tensorflow2.x实现<strong>（封装的特性）</strong>。关于深度学习和神经网络的知识梳理有空再写吧。</p><p>​        先到这里。</p><p>​        ————————————————————2022/7/15  23：28</p><p>​        ————————————————————2022/7/17  9：41接着写</p><p>​        拖欠了两天都没写完哈哈。不过下一阶段的任务还没开始，也不急。字符识别卷积神经网络搭好了，接下来就是web的搭建了，Python的flask是完全没学过的内容。</p><p>​        直接按照搭建网络的顺序逐个说明吧。</p><p><strong>一.数据读取</strong></p><p>现在很多CV领域的数据读取都是直接读取现成的数据集，但是这里需要从本地文件当中读取，并进行处理，这一部分tf1和tf2没区别，不用改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">dir_path</span>):</span><br><span class="line">    data = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(dir_path):</span><br><span class="line">        item_path = os.path.join(dir_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(item_path):</span><br><span class="line">            <span class="keyword">for</span> subitem <span class="keyword">in</span> os.listdir(item_path):</span><br><span class="line">                subitem_path = os.path.join(item_path, subitem)</span><br><span class="line">                gray_image = cv.imread(subitem_path, cv.IMREAD_GRAYSCALE)</span><br><span class="line">                resized_image = cv.resize(gray_image, (IMAGE_WIDTH, IMAGE_HEIGHT))</span><br><span class="line">                data.append(resized_image.ravel())</span><br><span class="line">                labels.append(LABEL_DICT[item])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.array(data), np.array(labels)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">data文件夹里面有0~1，A~Z的所有字符，每个字符有一个文件夹存储对应图片，这部分代码的功能就是把每个图片读出来，转换成20*20的大小，label就是文件夹名称</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>正式进行数据读取的步骤开始有了变化。原本会对训练集和测试集都进行正则化，然后再把标签独热编码，这两步都是自定义的函数。tf2提供相关的API。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取训练集的特征矩阵、标签向量</span></span><br><span class="line">train_data, train_labels = load_data(TRAIN_DIR)</span><br><span class="line"><span class="comment"># 对训练集的标签向量执行独热编码,tf2提供API</span></span><br><span class="line">train_labels = tf.one_hot(train_labels, <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取训练集的总样本数</span></span><br><span class="line">train_samples_count = <span class="built_in">len</span>(train_data)</span><br><span class="line">train_indicies = np.arange(train_samples_count)</span><br><span class="line"><span class="comment"># 获得打乱的索引序列</span></span><br><span class="line">np.random.shuffle(train_indicies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取测试集的特征矩阵、标签向量</span></span><br><span class="line">test_data, test_labels = load_data(TEST_DIR)</span><br><span class="line"><span class="comment"># 对测试集的标签向量执行独热编码</span></span><br><span class="line">test_labels = tf.one_hot(test_labels, <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入tf2搭建的网络之后还要reshape，变成[N, width, height, 1(灰度图)]的形式</span></span><br><span class="line">train_data = tf.reshape(train_data, (train_data.shape[<span class="number">0</span>], IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>))</span><br><span class="line">test_data = tf.reshape(test_data, (test_data.shape[<span class="number">0</span>], IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">可能会问，原先的正则化哪去了，答案是：直接在神经网络入口加一层正则化层就行</span></span><br><span class="line"><span class="string">这样不用分别处理训练集和测试集，它们进入网络就会正则化了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>二.搭建网络（封装的特性）</strong></p><p>tf2搭建网络最明显的特点就是<strong>封装的特性</strong>，直接在一个对象当中设置好每一层的参数就可以，不需要手动实现底层代码，有了非常明显的改进。</p><p>直接上代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">network = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># 正式操作之前先进行正则化，专门的正则化层</span></span><br><span class="line">    tf.keras.layers.BatchNormalization(),</span><br><span class="line">    <span class="comment"># 第一层卷积层，32个卷积核，大小5*5，自动初始化，relu激活，输入形状固定</span></span><br><span class="line">    tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>),</span><br><span class="line">    <span class="comment"># 第一层池化层</span></span><br><span class="line">    tf.keras.layers.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),  <span class="comment"># 20=&gt;10，步长应该取2</span></span><br><span class="line">    <span class="comment"># 第二层卷积层</span></span><br><span class="line">    tf.keras.layers.Conv2D(filters=<span class="number">64</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">10</span>, <span class="number">10</span>, <span class="number">32</span>), padding=<span class="string">&#x27;same&#x27;</span>),</span><br><span class="line">    <span class="comment"># 第二层池化层</span></span><br><span class="line">    tf.keras.layers.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),  <span class="comment"># 10=&gt;5</span></span><br><span class="line">    <span class="comment"># 把二维矩阵展平成向量</span></span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1024</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    <span class="comment"># 全连接之后会导致参数爆炸，需要dropout一些数据</span></span><br><span class="line">    tf.keras.layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line">    <span class="comment"># 仿射函数</span></span><br><span class="line">    tf.keras.layers.Dense(CLASSIFICATION_COUNT, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>这只是前向传播的代码，交叉熵损失函数和反向传播算法如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">network.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),# 反向传播算法&amp;学习率设置</span><br><span class="line">    loss=tf.keras.losses.BinaryCrossentropy(),# 交叉熵损失函数</span><br><span class="line">    metrics=[&#x27;accuracy&#x27;])</span><br></pre></td></tr></table></figure><p><strong>三.训练模型、评估准确率、保存模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">network.fit(train_data, train_labels, batch_size=<span class="number">50</span>, epochs=<span class="number">30</span>, validation_split=<span class="number">0.02</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">直接指定batch_size和epochs即可，很方便</span></span><br><span class="line"><span class="string">validation_split这个参数就是每次训练时，把训练集中一定比例的数据不参与训练，用来测算正确率等参数，测出来也不改变参数</span></span><br><span class="line"><span class="string">最开始validation_split=0.1的时候，训练当中算出来的正确率很高，98/99%甚至100%。但是测试集效果不好，正确率89%左右。我估计是因为直接削减了10%的数据，泛化能力不强。</span></span><br><span class="line"><span class="string">但是如果设置validation_split=0.0，训练和测试效果很好，98~99%，但是实际检测效果反而不如前者，说明可能过拟合了</span></span><br><span class="line"><span class="string">所以设置validation_split=0.02，这样中庸的策略既保证了正确率，泛化能力又不错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估准确率</span></span><br><span class="line">test_loss, test_acc = network.evaluate(test_data, test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n测试准确率：&#x27;</span>, test_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">network.save_weights(MODEL_PATH)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">保存模型可以直接保存模型。也可以保存模型的权重（参数），预测的时候，构造一个同架构的网络，直接加载参数即可。</span></span><br><span class="line"><span class="string">前者比较友好，很简单，但是队友用了后者就用后者吧，我觉得后者会更快，因为直接加载参数显然比直接加载模型要更简单</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>四.实战预测</strong></p><p>1.自定义一个加载图片的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_image</span>(<span class="params">image_path, width, height</span>):</span><br><span class="line">    gray_image = cv.imread(image_path, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    resized_image = cv.resize(gray_image, (width, height))</span><br><span class="line">    data = []</span><br><span class="line">    data.append(resized_image.ravel())</span><br><span class="line">    <span class="keyword">return</span> np.array(data)</span><br></pre></td></tr></table></figure><p>2.搭建一个网络，并加载权重|参数，这主要是由之前保存只是保存了参数决定的，如果保存的是模型，就直接加载好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载训练好的模型</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># 网络的具体架构不重复，和前文完全一致</span></span><br><span class="line">])</span><br><span class="line"><span class="comment"># 加载参数</span></span><br><span class="line">model.load_weights(<span class="string">&quot;model/my_cnn_enu&quot;</span>)</span><br><span class="line"><span class="comment"># 这样，model就是之前训练好的模型了</span></span><br></pre></td></tr></table></figure><p>3.读取图片，reshape成可以进入网络的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digit_image_path = <span class="string">&quot;images/english.jpg&quot;</span></span><br><span class="line">digit_image = load_image(digit_image_path, IMAGE_WIDTH, IMAGE_HEIGHT)</span><br><span class="line">english_image = tf.reshape(digit_image, [-<span class="number">1</span>, IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>4.预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">results = model.predict(english_image)</span><br><span class="line"><span class="comment"># 选概率最大的</span></span><br><span class="line">num = np.argmax(results[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 通过索引转成对应的字符</span></span><br><span class="line">new_dict = &#123;v : k <span class="keyword">for</span> k, v <span class="keyword">in</span> LABEL_DICT.items()&#125;<span class="comment">#反转字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测结果是：&quot;</span>, new_dict[num])</span><br><span class="line"><span class="comment"># 预测结束</span></span><br></pre></td></tr></table></figure><p><em><strong>以上就是全部的内容了，是不是挺简单的呢，反正我觉得挺简单的，哈哈。</strong></em></p><p>让大家看看效果叭。</p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image1.png" alt="image1"></p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image2.png" alt="image2"></p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image3.png" alt="image3"></p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image4.png" alt="image4"></p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image5.png" alt="image5"></p><p><img src="/2022/07/15/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%88%90%E7%86%9F%E7%9A%84%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E8%AF%86%E5%88%AB/image6.png" alt="image6"></p><p>最后一张预测错惹，没办法，这个A真的很像4。</p><p>第一篇技术博客正式完结，实际用时也不久，挺好的。</p><p>谢谢观看~</p>]]></content>
    
    
    <summary type="html">总算是开始了自己的第一篇技术博客。</summary>
    
    
    
    <category term="技术" scheme="http://yangyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="深度学习" scheme="http://yangyy.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="卷积神经网络" scheme="http://yangyy.top/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Python" scheme="http://yangyy.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://yangyy.top/2022/07/14/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yangyy.top/2022/07/14/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-07-14T07:41:44.000Z</published>
    <updated>2022-07-16T07:58:40.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><p>​        你好呀，我的朋友，欢迎来到我的博客！</p><p>​        想自己写博客已经很久了，一方面觉得把自己平时学习的心得、笔记梳理记录下来，对自己的学习大有裨益（对于一个准程序猿来说，拥有自己的学习、技术博客似乎十分必要）；另一方面是受樊一鸣同学（个人博客地址<strong>fanyiming.life</strong>)的影响，在一个属于自己的天地当中记录下自己平时的感受，对自己的所作所为复盘，多年后看来也是一笔宝贵的财富。</p><p>​        虽然想写博客的想法比较强烈，但是似乎也没有战胜自己的懒惰。学期内总感觉学业繁重，忙活完课内学习似乎不再有精力探索个人博客的搭建；放假之后又打不起学习的劲头。本学期看了一鸣哥的博客之后感触颇深，现在又是暑期学校（要保持学习的状态却又不像学期当中那么忙），值此机会就开始了个人博客的搭建之旅。</p><p>​        创建个人博客的原因如上所述有学习、生活两方面，因此关于博客的开放性也有两种态度。于生活的角度，想记录自己的心里的各种想法和生活点滴，以我的性格自然是不希望有过多的人看到，更希望这是我自己的一片小天地；于学习的角度，作为程序猿，我认为应该有开源的观念，学习的技术应该分享给大家，同时以后参加面试，个人技术博客自然是要给”老板“看的，这又必须保持博客的开放性。多少纠结了一段时间。</p><p>​        最后想到了两全的解决方案，这个博客作为个人的隐私空间，学习和生活中的内容都在此记录，再把学习帖copy到其他博客网站上即可，两全其美。</p><p>​        所以，我的朋友，你能来到我的小天地，实在说明我很信任你，愿意向你敞开胸怀。</p><p>​        等我正式建立起了我的学习博客，再把地址放在这里吧。</p><p>​        希望博客的搭建能促使我的生活更加规律、向上吧。</p><p>​        <strong>欢迎常来！</strong></p>]]></content>
    
    
    <summary type="html">开通博客的一些想法</summary>
    
    
    
    <category term="漫无目的的思考" scheme="http://yangyy.top/categories/%E6%BC%AB%E6%97%A0%E7%9B%AE%E7%9A%84%E7%9A%84%E6%80%9D%E8%80%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yangyy.top/2022/07/14/hello-world/"/>
    <id>http://yangyy.top/2022/07/14/hello-world/</id>
    <published>2022-07-14T03:07:28.789Z</published>
    <updated>2022-07-16T07:57:55.304Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hexo使用简介</summary>
    
    
    
    <category term="技术" scheme="http://yangyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="http://yangyy.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
