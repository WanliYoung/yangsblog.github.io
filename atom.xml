<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangyy&#39;s Life</title>
  
  <subtitle>这里是杨万里的生活</subtitle>
  <link href="https://43.143.214.130/atom.xml" rel="self"/>
  
  <link href="https://43.143.214.130/"/>
  <updated>2022-11-15T07:27:04.352Z</updated>
  <id>https://43.143.214.130/</id>
  
  <author>
    <name>yangyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcodeT5最长回文子串题解</title>
    <link href="https://43.143.214.130/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://43.143.214.130/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/</id>
    <published>2022-11-15T07:13:22.000Z</published>
    <updated>2022-11-15T07:27:04.352Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述如下："><a class="header-anchor" href="#题目描述如下：">¶</a>题目描述如下：</h4><p><img src="/2022/11/15/leetcodeT5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i1.png" alt="i"></p><h4 id="题解："><a class="header-anchor" href="#题解：">¶</a>题解：</h4><p>对于一个回文子串，比如“abjba”，去除首尾字符得到的“bjb”仍然是回文子串，由这样的结构容易想到<strong>动态规划</strong>。</p><p>s[i,j]表示i到j的子串。</p><p>s[i,j]是回文串的前提是<strong>s[i+1,j-1]是回文串且s[i]==s[j]</strong>，这也就能成立递归了。</p><p>直接开一个n*n的bool型数组IF[i] [j]，其值为1表示s[i,j]是回文串，否则不是，我们只需要考虑i&lt;=j的情况就好了。</p><p>首先IF[i] [i]直接赋1，因为单个字符一定是回文串。</p><p>接着按照长度开始遍历，2~n，起始点均从0开始，注意边界。需要单独处理的是长度为2/3的子串**（只需要s[i]==s[j]）**，否则按照递归条件处理。</p><p>对于是回文串的子串，需要和已存储的最长回文子串进行比较。</p><p>如此则完成。</p><p>时间复杂度O(n^2)。</p><h4 id="源代码："><a class="header-anchor" href="#源代码：">¶</a>源代码：</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        string maxs = <span class="string">""</span>;</span><br><span class="line">        maxs += s[<span class="number">0</span>];</span><br><span class="line">        vector&lt;vector &lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">IF</span>(len, vector&lt;<span class="keyword">bool</span>&gt;(len));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            IF[i][i] = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=len;l++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">                <span class="keyword">int</span> j = i + l <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; (len<span class="number">-1</span>)){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]){</span><br><span class="line">                    IF[i][j] = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>((j - i <span class="number">-1</span> &lt; <span class="number">2</span>)){</span><br><span class="line">                        IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span>{</span><br><span class="line">                        <span class="keyword">if</span>(IF[i+<span class="number">1</span>][j<span class="number">-1</span>]){</span><br><span class="line">                            IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(IF[i][j]){</span><br><span class="line">                    <span class="keyword">int</span> length = j - i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; maxLen){</span><br><span class="line">                        maxs = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;k++){</span><br><span class="line">                            maxs += s[k];</span><br><span class="line">                        }</span><br><span class="line">                        maxLen = length;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxs;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>以上。</p>]]></content>
    
    
    <summary type="html">太久没更新了，写一篇题解吧。</summary>
    
    
    
    <category term="算法学习" scheme="https://43.143.214.130/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="leetcode" scheme="https://43.143.214.130/tags/leetcode/"/>
    
    <category term="动态规划" scheme="https://43.143.214.130/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>异常检测挑战赛数据绘制</title>
    <link href="https://43.143.214.130/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/"/>
    <id>https://43.143.214.130/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/</id>
    <published>2022-11-01T14:02:55.000Z</published>
    <updated>2022-11-01T14:34:35.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a class="header-anchor" href="#前言：">¶</a>前言：</h4><p>上周学长和我说如果论文读的差不多了可以把数据集上的数据用matplotlib画出来。想着操纵一下真实的数据想必能对项目有更深的理解，于是开始学习。</p><p>matplotlib是Python的第三方库，确实很重要。</p><p>学习本身我也就是相当于学会怎么用”锤子“，所以也没什么值得分享和记录的。</p><p>读者有需要的可以去看莫凡Python的网课，链接如下：</p><blockquote><p><a href="https://www.bilibili.com/video/BV1Jx411L7LU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=9d8000465f487fa8d1bdc7f47736df48">【莫烦Python】Matplotlib Python 画图教程_哔哩哔哩_bilibili</a></p></blockquote><h4 id="正文："><a class="header-anchor" href="#正文：">¶</a>正文：</h4><p>本次操作数据集其实需要的matplotlib知识并不多。</p><h5 id="1-先了解csv文件里面数据存储的形式"><a class="header-anchor" href="#1-先了解csv文件里面数据存储的形式">¶</a>1.先了解csv文件里面数据存储的形式</h5><p>有四列属性，第一列是时间戳，第二列是节点名称，第三列是KPI名称（一个文件当中都相同），第四列是具体数值。大致如下图所示。</p><p><img src="/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/1.png" alt=""></p><p>一个文件基本上有四十个节点，每个节点对应一个KPI序列，因此KPI序列的x轴是timestamp，y轴是value。</p><h5 id="2-画出第一个时间序列"><a class="header-anchor" href="#2-画出第一个时间序列">¶</a>2.画出第一个时间序列</h5><p>对于每个节点，都有timestamp和value两个list，直接采用折线图（plot）的形式，即可画出序列，但是注意调整figsize（宽高比例）。</p><h5 id="3-利用subplot画出多个子图"><a class="header-anchor" href="#3-利用subplot画出多个子图">¶</a>3.利用subplot画出多个子图</h5><p>subplot就是让一个figure（一张图片）里面有多个子图（时间序列）</p><p><img src="/2022/11/01/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%8C%91%E6%88%98%E8%B5%9B%E6%95%B0%E6%8D%AE%E7%BB%98%E5%88%B6/01.png" alt=""></p><h5 id="4-画出多个csv文件"><a class="header-anchor" href="#4-画出多个csv文件">¶</a>4.画出多个csv文件</h5><p>编写程序，遍历整个文件夹下所有csv文件，每个csv文件创建一个文件夹，每个文件夹存储该csv文件中所有时间序列。主要就是python的文件输出流了。</p><p>大抵是完成任务了。</p><p>（感觉需要记录一下，但是又不想细写，也没什么值得写的，就这样吧）</p><p>源代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个节点都有自己的名字和时间序列（timestamp&amp;value)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.time_stamp = []</span><br><span class="line">        self.value = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"D:\MTSAD\data\初赛评分数据\\2022-05-01\cloudbed\metric\container"</span></span><br><span class="line">file = os.listdir(url)</span><br><span class="line"><span class="comment"># 这一步是因为我已经手动画过这几个文件了，所以remove</span></span><br><span class="line">file.remove(<span class="string">".DS_Store"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_seconds.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_load_average_10s.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_system_seconds.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> F <span class="keyword">in</span> file:</span><br><span class="line">    <span class="comment"># 处理单个csv文件</span></span><br><span class="line">    <span class="comment"># 每个csv文件对应一系列节点</span></span><br><span class="line">    node_list = []</span><br><span class="line">    temp = url + <span class="string">"\\"</span> + F</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp, mode=<span class="string">"r"</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        header = <span class="built_in">next</span>(reader)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            time = <span class="built_in">int</span>(row[<span class="number">0</span>]) - <span class="number">1651334400</span></span><br><span class="line">            value = <span class="built_in">float</span>(row[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">                <span class="keyword">if</span> node.name == row[<span class="number">1</span>]:  <span class="comment"># 已经找到所属节点</span></span><br><span class="line">                    node.time_stamp.append(time)</span><br><span class="line">                    node.value.append(value)</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                temp_node = Node(row[<span class="number">1</span>])</span><br><span class="line">                temp_node.time_stamp.append(time)</span><br><span class="line">                temp_node.value.append(value)</span><br><span class="line">                node_list.append(temp_node)</span><br><span class="line"></span><br><span class="line">    tmp = F[:-<span class="number">4</span>]</span><br><span class="line">    save_path = <span class="string">"D:\MTSAD\data\img\\2022-5-01\container\\"</span> + tmp</span><br><span class="line">    os.mkdir(save_path)  <span class="comment"># 创建所属文件夹</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">24</span>, <span class="number">6</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            node = node_list[index]</span><br><span class="line">            fig.add_subplot(<span class="number">4</span>, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            plt.plot(node.time_stamp, node.value)</span><br><span class="line">            plt.title(node.name, loc=<span class="string">'left'</span>)</span><br><span class="line">            plt.subplots_adjust(wspace=<span class="number">0</span>, hspace=<span class="number">0.6</span>)  <span class="comment"># 调整子图间距</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 存储</span></span><br><span class="line">        plt.savefig(save_path + <span class="string">"\\"</span> + <span class="string">f"0<span class="subst">{j}</span>.png"</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">matplotlib的初步学习与应用 &amp; 异常检测数据集可视化</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="Python" scheme="https://43.143.214.130/tags/Python/"/>
    
    <category term="matplotlib" scheme="https://43.143.214.130/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>leetcodeT3无重复字符的最长子串题解</title>
    <link href="https://43.143.214.130/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/"/>
    <id>https://43.143.214.130/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/</id>
    <published>2022-10-27T07:46:14.000Z</published>
    <updated>2022-10-27T08:40:43.537Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述："><a class="header-anchor" href="#题目描述：">¶</a>题目描述：</h4><p>题目描述如下</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i1.png" alt=""></p><h4 id="题解一："><a class="header-anchor" href="#题解一：">¶</a>题解一：</h4><p>首先想到一个暴力的方法，考虑所有的子串。比如一个字符串的长度是n，那么它有1个长度为n的子串，2个长度为n-1的子串，…，n个长度为1的子串。从长到短遍历，对于每个子串判断其是否包含重复元素(这个比较简单)，一旦找到长度为x的不重复的子串，就可以返回长度x了。</p><p>时间复杂度是O（n3），长度遍历一层循环、特定长度子串遍历一层循环、判断是否重复一层循环。</p><p>这个方法是正确的，但是不能ac。因为太慢了，最长的一个测试样例时间超限。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断一个字符串是否含有重复字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifRe</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> arr[<span class="number">200</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">if</span>(ifExist(arr, count, s[i])){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            } </span><br><span class="line">            arr[count] = s[i];</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--){</span><br><span class="line">            <span class="keyword">int</span> nums = len - i + <span class="number">1</span>;  <span class="comment">//i长度得子串数目</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums;j++){</span><br><span class="line">                <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;(j+i);k++){</span><br><span class="line">                    temp[k-j] = s[k];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(!ifRe(temp, i)){</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="题解二："><a class="header-anchor" href="#题解二：">¶</a>题解二：</h4><p>只好选择时间复杂度更为优化的算法。</p><p>想到，遍历字符串的每个字符，所有的子串一定是以其中某个字符开头的连续序列。那么我们把每个字符开头的最长连续子串长度算出，再取其中的max即可。</p><p>对于每个字符，逐个取其后的字符，如果没有重复就加入子串，直到出现重复，从而计算出最长长度。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> start = s[i];</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = start;</span><br><span class="line">            <span class="keyword">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>这个算法已经可以通过测试了，但是时间复杂度不算好，O（n2）。</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i2.png" alt=""></p><h4 id="题解三："><a class="header-anchor" href="#题解三：">¶</a>题解三：</h4><p>在题解二的基础上进一步优化。</p><p>实际上题解二是有重复计算的部分的：对于第k个字符，其最长不重复子串可能到第rk个字符。那么我们继续计算k+1个字符的最长不重复子串时，k+1到rk的字符子串是不会重复的，完全可以避免判断，直接从rk之后开始。所以只需要维护一个变量last，记录上一个字符最后的索引，下一次直接从last+1开始考虑，前面照搬即可。</p><p>源代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=last;j++){</span><br><span class="line">                temp[j-i] = s[j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> maxlen = last - i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = last+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">            last = i + maxlen - <span class="number">1</span>; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>虽然时间复杂度还是O（n2），但是一定比上一个方法快。</p><p><img src="/2022/10/27/leetcodeT3%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E9%A2%98%E8%A7%A3/i3.png" alt=""></p><p>以上。</p>]]></content>
    
    
    <summary type="html">第三道leetcode，第一篇题解~</summary>
    
    
    
    <category term="算法学习" scheme="https://43.143.214.130/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="leetcode" scheme="https://43.143.214.130/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>《自监督对比预测编码》论文复现</title>
    <link href="https://43.143.214.130/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    <id>https://43.143.214.130/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-10-17T11:06:22.000Z</published>
    <updated>2022-10-18T07:06:05.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3><p>本篇文章旨在记录《用自监督的对比预测编码进行时间序列变化点检测》论文的复现过程。</p><p>由于本人习惯一边做实验，一边写报告记录，所以文章的撰写也是和实验同步进行的。因此对于能否复现实验成果，我没有很大的把握。但是就算是失败的尝试，也算是值得记录的。</p><p>该论文的阅读笔记见</p><blockquote><p><a href="http://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p></blockquote><h3 id="要求："><a class="header-anchor" href="#要求：">¶</a>要求：</h3><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i12.png" alt="i"></p><h3 id="正文：-v2"><a class="header-anchor" href="#正文：-v2">¶</a>正文：</h3><h4 id="1-代码获取"><a class="header-anchor" href="#1-代码获取">¶</a>1.代码获取</h4><p>由于是挑选容易找到源代码的论文进行复现，所以这一步并不困难，源码在GitHub上有。</p><blockquote><p><a href="https://github.com/cruiseresearchgroup/TSCP2">https://github.com/cruiseresearchgroup/TSCP2</a></p></blockquote><p>该仓库包含所用的三个数据集中的USC数据集。</p><h4 id="2-设定参数"><a class="header-anchor" href="#2-设定参数">¶</a>2.设定参数</h4><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i1.png" alt="i"></p><p>根据提示，程序运行需要设定输出路径和输入数据集等参数，提到这两者是必要的参数。</p><p>参数可以在PyCharm中设定。（USC是默认的数据集名称）</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i2.png" alt="i"></p><p>设定参数之后试着运行程序，报错，似乎是因为我的电脑没有GPU资源。</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i3.png" alt="i"></p><p><strong>初步判断应该是程序采取CUDA编程，但是我本机不支持</strong>，看看能不能修改吧。</p><p>后来多等了一会，发现进度条动了</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i5.png" alt="i"></p><p>看来是可以跑，只不过也许是因为CPU很慢，所以才显示红色。确实，毕竟也不是报错。</p><p>当然，我觉得可能和我把GPU的参数注释掉有关。但是我在整个代码中确实没有发现某个实验过程显式调用了GPU。主要也是<strong>我对tensorflow如何选择硬件支持的机制不太了解</strong>，也许是它会自主选择，不需要人为设置？</p><h4 id="3-改用CPU支持tensorflow"><a class="header-anchor" href="#3-改用CPU支持tensorflow">¶</a>3.改用CPU支持tensorflow</h4><p>这一步暂时没找到合适的解决方案，先放着，尝试结合论文理解代码吧。</p><p>（自适应了，不用改）</p><h4 id="4-理解代码"><a class="header-anchor" href="#4-理解代码">¶</a>4.理解代码</h4><h5 id="（1）预设置"><a class="header-anchor" href="#（1）预设置">¶</a>（1）预设置</h5><ul><li>读取外部参数，比如数据集路径，模型存储路径等等</li><li>设置模型参数，比如时间窗口的大小、批处理大小、迭代轮数等等</li><li>设置损失函数</li></ul><h5 id="（2）数据预处理"><a class="header-anchor" href="#（2）数据预处理">¶</a>（2）数据预处理</h5><ul><li>装载数据集，在自定义的DataHelper.py当中有一个load_dataset()函数，参数是数据集所在路径、数据集名称等。（直接完成了数据预处理）</li></ul><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i4.png" alt="i"></p><p>这当中load_hasc_ds和load_usc_ds都是第三方库的函数。</p><p><strong>但是这里颇为奇怪，根据代码，如果输入的数据集不是HASC和USC，程序就会报错，那么实验的雅虎数据集是怎么做的？</strong></p><p>自己加上打印数据，从而<strong>观察输入数据集是什么样的</strong>（学长提问）</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i6.png" alt="i"></p><p>以上信息基本可以反映输入数据集的情况了。</p><p>首先总的样本数是18687，其中异常点有1400，大概占比7.5%。</p><p>其中选择14949个样本作为训练集，占比80%（常见的比例）。</p><p>可以发现输入的数据分为两块，trainx和trainlbl，也就对应着时间序列和是否为异常的标签。</p><p>trainx的shape是（14949，200），代表着有14949个样本，维度是200维，代表着200个属性。</p><p>而trainlbl的shape是（14949，1），代表着14949个样本，每个样本对应1维的0/1值，代表是否为异常值。</p><p>因此输入的数据集的shape是（14949，201）。</p><p><strong>可以看看最初始的数据集长什么样</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i9.png" alt="i"></p><p>就是非常长的一串数据，应该是<strong>未经切分处理的时间序列数据</strong>。</p><h5 id="（3）构造特征编码器的基本结构"><a class="header-anchor" href="#（3）构造特征编码器的基本结构">¶</a>（3）构造特征编码器的基本结构</h5><p>TS-CP2方法的核心是编码器。这里主要定义其结构。</p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i8.png" alt="i"></p><h5 id="（4）训练得到编码器"><a class="header-anchor" href="#（4）训练得到编码器">¶</a>（4）训练得到编码器</h5><p>训练的目的就是得到编码器的合适参数，也就是得到合适的编码器。类似于神经网络里的神经元的参数。</p><p><strong>过程采用对比预测编码（正样本集和负样本集的各种对比获取信息）</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i7.png" alt="i"></p><p>用CPU进行训练非常漫长，而且每轮迭代的用时迅速增加，第6轮迭代到第8轮迭代用时1小时，花了近两小时训练过程仅未完成8/1600，所以没能完成训练模型的过程。</p><p>根据代码可以发现，编码器输出的编码特征的大小是可以指定的参数，默认是10。意味着向编码器输入时间序列，每个时间点得到一个10维的特征编码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'--code'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>, <span class="built_in">help</span>=<span class="string">'size of encoded features'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="（5）进行测试"><a class="header-anchor" href="#（5）进行测试">¶</a>（5）进行测试</h5><h6 id="1）装载测试数据集"><a class="header-anchor" href="#1）装载测试数据集">¶</a>1）装载测试数据集</h6><h6 id="2）输入到特征编码器"><a class="header-anchor" href="#2）输入到特征编码器">¶</a>2）输入到特征编码器</h6><h6 id="3）根据特征编码计算余弦相似度"><a class="header-anchor" href="#3）根据特征编码计算余弦相似度">¶</a>3）根据特征编码计算余弦相似度</h6><h6 id="4）根据余弦相似度判断是否异常"><a class="header-anchor" href="#4）根据余弦相似度判断是否异常">¶</a>4）根据余弦相似度判断是否异常</h6><p><strong>如何计算异常分数？异常阈值是多少？</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_CPs</span>(<span class="params">sim, gt, name, train_name, metric=<span class="string">'cosine'</span>, threshold=<span class="number">0.5</span></span>):</span></span><br><span class="line">    <span class="comment">#if metric == "cosine":</span></span><br><span class="line">    <span class="comment">#    sim = _cosine_simililarity_dim1(h, f)</span></span><br><span class="line"></span><br><span class="line">    est_cp = np.zeros(sim.shape[<span class="number">0</span>])</span><br><span class="line">    est_cp[np.where(sim &lt; threshold)[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">    tn, fp, fn, tp = confusion_matrix(gt, est_cp).ravel()</span><br><span class="line">    f1 = f1_score(gt, est_cp)</span><br></pre></td></tr></tbody></table></figure><p>异常分数用余弦相似度衡量，异常的阈值也是需要指定的参数（默认就是0.5）。</p><p><strong>余弦相似度的相关知识：</strong></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i10.png" alt="i"></p><p><img src="/2022/10/17/%E3%80%8A%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E3%80%8B%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/i11.png" alt="i"></p><p>但是阈值这一参数也是需要计算（正负样本集）得到的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold=epoch_wise_sim[-<span class="number">1</span>] - ((epoch_wise_sim[-<span class="number">1</span>]-epoch_wise_neg[-<span class="number">1</span>])/<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p>最终输出就是0/1序列，代表是否为异常点。</p><h5 id="（6）保存模型"><a class="header-anchor" href="#（6）保存模型">¶</a>（6）保存模型</h5><p><strong>结语</strong>：总体摸清了实验的思路，但是有的具体细节还没能理解，限于机器算力，未能完整复现实验。</p>]]></content>
    
    
    <summary type="html">尝试复现论文《用自监督的对比预测编码进行时间序列变化点检测》的实验成果</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="自监督" scheme="https://43.143.214.130/tags/%E8%87%AA%E7%9B%91%E7%9D%A3/"/>
    
    <category term="对比预测编码" scheme="https://43.143.214.130/tags/%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81/"/>
    
    <category term="论文复现" scheme="https://43.143.214.130/tags/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>简单的文献综述-阶段1</title>
    <link href="https://43.143.214.130/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/"/>
    <id>https://43.143.214.130/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/</id>
    <published>2022-10-12T02:23:23.000Z</published>
    <updated>2022-10-12T03:36:24.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="论文篇目"><a class="header-anchor" href="#论文篇目">¶</a>论文篇目</h3><p>最近看的三篇论文信息如下图：</p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i1.png" alt="i"></p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i2.png" alt="i"></p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i3.png" alt="i"></p><p>三篇论文阅读笔记的链接如下：</p><blockquote><p><a href="https://yangyy.top/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p><p><a href="https://yangyy.top/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《云系统的跨数据集时间序列异常检测》个人笔记 | Yangyy’s Life</a></p><p><a href="https://yangyy.top/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《微软公司的时间序列异常检测服务》个人笔记 | Yangyy’s Life</a></p></blockquote><h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>这三篇文章的共同核心就是<strong>时间序列异常检测</strong>，虽然都是异常检测，但是实际还是有一定差别。前两篇是“<strong>Anomaly Detection</strong>”，第三篇是“<strong>Change Point Detection</strong>”，前者是异常检测，后者是变化点检测。异常检测即“不合群”的点，变化点检测就是过渡的点。不过过渡点通常也是“不合群”的点。</p><h3 id="对于检测方法的预期"><a class="header-anchor" href="#对于检测方法的预期">¶</a>对于检测方法的预期</h3><p>三篇论文大致都表达了希望检测方法<strong>准确、高效、通用</strong>以适应工业界的需求。</p><h3 id="遇到的困难"><a class="header-anchor" href="#遇到的困难">¶</a>遇到的困难</h3><p>当前的检测方法主要分为<em>传统统计模型、监督学习模型、无监督学习模型</em>。</p><p>如果数据集的时间序列有足够数量的标签，监督学习（CNN等）其实效果很好。但是在工业界，需要检测的数据集很庞大，手工标记非常困难，所以很少有直接采用监督学习进行预测的。</p><p>那么传统统计模型和无监督学习模型虽然不需要手工标记数据，但是实验的效果并不理想。</p><p>在”自监督对比预测编码“文章中分析到，对于变化点的检测，传统的统计模型比如根据统计学成本函数最优化，选择合适的变化点（个人的理解就是类似于分段最小二乘法、动态规划）。而且通常是侧重于某些属性/维度。</p><h3 id="提出的新方法"><a class="header-anchor" href="#提出的新方法">¶</a>提出的新方法</h3><p>三篇文章提出的新方法可以概括为“自监督对比预测编码”、“跨数据集检测”、“频谱残差+CNN”。</p><p>其实我个人感觉就是尽量贴近监督学习，通过不同的方式，在减少标记数据成本的条件下，达到监督学习的效果。</p><h4 id="“自监督对比预测编码”——变化点检测"><a class="header-anchor" href="#“自监督对比预测编码”——变化点检测">¶</a>“自监督对比预测编码”——变化点检测</h4><p>基础的思路：根据历史数据预测未来数据，如果现实数据和预测数据差别很大，说明变异点出现了。但是这种方法通常是针对一个属性，而且和统计分布有关。</p><p>自监督对比预测编码：自监督是检测器对每个时间窗口<strong>生成一个表征编码</strong>（类似于自动标记），预测时就根据时间窗口之间的余弦相似度来判断变化点。</p><p>关键就在于<strong>表征的生成</strong>。采用自动回归的深度卷积神经网络学习编码表示。这里对比预测需要学习相似和相异的属性，因此有正样本和负样本之分，正样本是相似的样本集，负样本是相异的样本集。所以会采集很多连续的时间窗口，子集内部就是正样本对，子集之间互为负样本。设置相应的损失函数即可。</p><h4 id="“跨数据集检测”"><a class="header-anchor" href="#“跨数据集检测”">¶</a>“跨数据集检测”</h4><p>因为监督学习效果好，但是标记成本高，无监督效果又不好。所以可以想到跨数据集检测的方法，基本思路：我们有一些历史的、有标记的数据，而且来自不同领域会有大量的标记数据集，但是因为领域有差别，所以预测新的数据集的时候不能用。但是并不是完全不能用，比如说<strong>触类旁通</strong>的思想，就是在这些<strong>已有数据集上学习到的“知识”，能不能迁移到目标数据集上</strong>。直接迁移肯定不行。</p><p>迁移学习+主动学习的方法可以。</p><h5 id="迁移学习"><a class="header-anchor" href="#迁移学习">¶</a>迁移学习</h5><p>对已有标签的源数据集和没有标签的目标数据集分别进行<strong>特征的归纳</strong>。特征归纳需要考虑三方面：统计特征、预测误差（多个模型）、时间序列（前后关联）。</p><p>归纳之后，对源域进行K-means聚类，因为源数据集可能是不同领域数据集的汇总。然后把部分的目标数据集作为样本，根据欧式距离分配到不同子源域。（<strong>这里的问题就是目标数据集不是应该是一类数据吗</strong>？）</p><p>此后，源域的特征还需要对目标域进行一次对齐（转换矩阵）。</p><h5 id="主动学习"><a class="header-anchor" href="#主动学习">¶</a>主动学习</h5><p>主动学习的思想就是利用一些目标域的数据进行<strong>人为标记，训练源域的检测器</strong>。为了尽量<strong>选择少并且有代表性的数据</strong>，根据<strong>不确定性和上下文多样性</strong>进行选择。</p><p>迁移学习+主动学习得到分类器。最终检测目标数据即可。</p><p>作者还控制变量对比了主动学习、迁移学习的组件的工作效果，都很好。</p><h4 id="“频谱残差-CNN”"><a class="header-anchor" href="#“频谱残差-CNN”">¶</a>“频谱残差+CNN”</h4><p>首先是希望用无监督的方法得到比较好的检测器。</p><p>受视觉显著性检测领域的启发（用光谱残差检测照片或者场景中突出的部分），实际上异常点在时间序列曲线当中也是视觉中突出的部分），所以采用SR进行识别。</p><h5 id="SR"><a class="header-anchor" href="#SR">¶</a>SR</h5><p>通过频谱残差分析，可以把时间序列转换成显著图/突出图。</p><p><img src="/2022/10/12/%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0-%E9%98%B6%E6%AE%B51/i4.png" alt="i"></p><p>异常点就会更加突出。</p><p>在这里其实可以简单根据阈值进行异常点识别了。但是为了更好的效果还是加上CNN。</p><p>提到了添加预测点。</p><h5 id="CNN"><a class="header-anchor" href="#CNN">¶</a>CNN</h5><p>因为SR模型已经可以简单输出有标签的数据集了，所以再加上CNN会更好。</p><p>首先人为地注入几个异常点。</p><p>再CNN。</p><h5 id="评价指标"><a class="header-anchor" href="#评价指标">¶</a>评价指标</h5><p>允许检测延迟。（有最小时延）</p><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><p>三篇论文提出的方法都比各自提到的基准方法有了可以说是全面的提升。</p>]]></content>
    
    
    <summary type="html">简单总结梳理一下最近阅读的三篇论文。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>《微软公司的时间序列异常检测服务》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-12T01:51:36.000Z</published>
    <updated>2022-10-12T04:43:24.322Z</updated>
    
    <content type="html"><![CDATA[<p>第三篇论文，原名《Time-Series Anomaly Detection Service at Microsoft》，译作《微软公司的时间序列异常检测服务》，CCF A。方法是光谱残差（SR）+CNN。</p><p>具体见笔记。</p><div class="row">    <embed src="./TSADMicrosoft.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第三篇论文，原名《Time-Series Anomaly Detection Service at Microsoft》，译作《微软公司的时间序列异常检测服务》，CCF A。方法是光谱残差（SR）+CNN。&lt;/p&gt;
&lt;p&gt;具体见笔记。&lt;/p&gt;


	&lt;div class=&quot;</summary>
      
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="卷积神经网络" scheme="https://43.143.214.130/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>不一样的页脚设置</title>
    <link href="https://43.143.214.130/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/"/>
    <id>https://43.143.214.130/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-10-11T02:06:35.000Z</published>
    <updated>2022-10-11T12:59:00.568Z</updated>
    
    <content type="html"><![CDATA[<h4 id="碎碎念"><a class="header-anchor" href="#碎碎念">¶</a>碎碎念</h4><p>星期天发现了Butterfly主题的美，于是决定换主题。没想到这一换就是三天。。。</p><p>很难去评价Butterfly主题的作者写的文档，可以说瑕不掩瑜吧，但是这个瑕还是挺搞人心态的。好的地方就是安装文档有一条很清晰的线，你可以按着它一步一步美化你的网站，作者可以说比较费心了。但是就我体验到的不好的地方，比如它的完备性甚至不如很多用户自己写的配置文档，还有就是有的地方教学过于潦草了。</p><p>以及，不知道是不是版本的问题（4.4.0），遇到了一些bug，比如说导航栏不能用自己定义的名字（比如中文），否则会出现中英两个导航栏，还有的bug下文会说。</p><h4 id="关于更换主题时评论系统的移植"><a class="header-anchor" href="#关于更换主题时评论系统的移植">¶</a>关于更换主题时评论系统的移植</h4><p>前面挺多操作都是按部就班，或者因为已经过去一两天我也没有动力回顾了。</p><p>觉得值得一讲的就是评论系统的移植吧。</p><p>如果是初次配置评论系统，读者自行利用搜索引擎就好，这里主要说说移植。</p><p>大部分人评论系统的数据库都是leancloud上的某个应用，在主题配置文件中绑定AppId和AppKey即可。</p><p>但是我一直不知道是不是允许移植。</p><p>Butterfly的文档里面介绍到配置评论系统好像只是介绍了配置文件开启valine。甚至没有教如何配置数据库。没有数据库怎么存储评论信息？也许作者默认大家自学了吧。</p><p><strong>经验证，不同主题之间，评论系统可以移植。butterfly的配置文件也绑定对应的leancloud应用即可</strong>。</p><h4 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h4><p>先看一下页脚的初始效果和最终效果吧。</p><p>初始效果：</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i1.png" alt="i1"></p><p>最终效果：</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i3.png" alt="i1"></p><p>感觉变化还是蛮大的吧。没想到这么小的一块做了一天。。。</p><h5 id="1-背景透明"><a class="header-anchor" href="#1-背景透明">¶</a>1.背景透明</h5><p>这一步就把丑陋的蓝色板块去掉了，可以看见我的主页背景图了。</p><h5 id="2-去掉Hexo和Butterfly支持"><a class="header-anchor" href="#2-去掉Hexo和Butterfly支持">¶</a>2.去掉Hexo和Butterfly支持</h5><p>虽然说这样不太好，毕竟人家提供了技术支持。但是为了美感，还是决定去掉。</p><p>把图中第二个if大段注释掉就好了，看懂代码应该就知道了。</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i4.png" alt="i"></p><h5 id="3-修改起止时间"><a class="header-anchor" href="#3-修改起止时间">¶</a>3.修改起止时间</h5><p>这个在上面那个图的第一个if，在主题配置文件的footer底下把owner的相关信息（包括since）修改一下。</p><p>我这里的代码思路应该和初始配置文件不一样，我的思路是首先起始时间是我建站时间，如果建站时间不到一年，就只显示当前年份，如果超过一年就显示起止年份。</p><p>应该看得懂代码。</p><h5 id="4-自定义语句"><a class="header-anchor" href="#4-自定义语句">¶</a>4.自定义语句</h5><p>这个网络说的很多，不多说了。</p><p>可以发现到目前为止很顺，但是我最喜欢的就是那句“本站已安全允许…”，做完这个我这一阶段就结束了。</p><p><strong>吐槽一下，官方文档不教这个。。。</strong></p><p>利用搜索引擎吧。</p><p>但是一般人家会这么教你。</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i5.png" alt="i"></p><p>好像大部分人都是这么做的，配置文件你找到这个位置就会发现有时间格式说明，但是很抱歉，按照这么做无法显示。</p><p>我以为是其他地方还要改，查了半天，发现都不是。</p><p>那可能就是bug了，毕竟有前车之鉴（导航菜单）。</p><p>应该不是我其他地方改错了，因为我复制了官方配置文件，只修改这里，也没用。</p><p>但是我很想要这个功能。</p><p>想到自己写一个，前面那个footer.pug文件显然就是前端页面了，直接代码写应该没问题。</p><p>但是问题在于，我不会这个代码。</p><p>只好Google，疯狂翻，然后找到了一个博主（谢谢博主！）</p><p><img src="/2022/10/11/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E9%A1%B5%E8%84%9A%E8%AE%BE%E7%BD%AE/i6.png" alt="i"></p><p>于是采纳，但是发现运行时间计算错了，89算成了58（刚好一个月）。时分秒倒是没错。</p><p>**但是看代码比写代码容易呀。**不会这个语言不代表不能debug。于是顺了一下思路：很简单，就是获取当前时间和起始时间，然后一减，先整除365天的时间，有多就是年；再整除天数（因为不显示月份）；再整除时分秒…</p><p>不详细说了，应该都看得懂。</p><p>很奇怪，逻辑没错呀。</p><p>于是猜测是getTime获取当前时间出问题了，要是getTime是准的，为什么要手动加上8小时的时间，于是猜测getTime不准。</p><p>所以，好吧，手动算差了多少，补上。。。。。</p><h5 id="弊端"><a class="header-anchor" href="#弊端">¶</a>弊端</h5><p>这样做弊端很明显的，首先没考虑闰年，那么每四年就会差1天，当然也有可能他们使用主题提供的也没考虑闰年。</p><p>还有就是这个getTime到底怎么回事，他这个误差是稳定31天8小时，还是不稳定的，比如取决于每个月多少天（因为前面说了刚好差一个月）。</p><p>以上隐患都可能导致出现误差，但是大体算是实现了。</p><p>很累，不想深究了，先这样吧，有空再深究。</p><p>顺便，把这个bug在Github上提供给作者了。</p><p>有什么你遇到的bug，我没讲清楚，欢迎联系我。急着去健身，脑子也累了，也烦了。</p><p>以上。</p>]]></content>
    
    
    <summary type="html">今天有点被完善网站搞心态了。。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用代理反而不能克隆GitHub的资源？</title>
    <link href="https://43.143.214.130/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/"/>
    <id>https://43.143.214.130/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/</id>
    <published>2022-10-09T10:25:18.000Z</published>
    <updated>2022-10-09T10:54:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>今天想给博客换个主题，于是开始操作。</p><p>第一步获取主题资源就卡了。因为各类主题的资源基本都在Github上，而GitHub又是国外的网站，因此我就挂上了VPN。命令行输入</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></tbody></table></figure><p>结果出bug了，几次都报错：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="string">'https://github.com/jerryc127/hexo-theme-butterfly.git/'</span>: OpenSSL SSL_read: <span class="keyword">Connection</span> was <span class="keyword">reset</span>, errno <span class="number">10054</span></span><br></pre></td></tr></tbody></table></figure><p>难崩，遇事不决，CSDN之。</p><p>看到了一些解决方案。</p><p>有这样说的：</p><p><img src="/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/i1.png" alt="image1"></p><p>也有这样说的：</p><p><img src="/2022/10/09/%E7%94%A8%E4%BB%A3%E7%90%86%E5%8F%8D%E8%80%8C%E4%B8%8D%E8%83%BD%E5%85%8B%E9%9A%86GitHub%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%9F/i2.png" alt="image2"></p><p>这些方法我都试了试，没什么用。</p><p>到更新git的步骤，我发现更新git也获取不到网址了，觉得也许又是代理的问题。于是关了VPN，就一切正常了。</p><p>暂时想不通为什么开着VPN获取不到Github的资源，关了就可以。也许是端口问题？</p>]]></content>
    
    
    <summary type="html">代理真神奇，连着两天碰到问题了。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
    <category term="代理（科学上网）" scheme="https://43.143.214.130/tags/%E4%BB%A3%E7%90%86%EF%BC%88%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%89/"/>
    
    <category term="Git" scheme="https://43.143.214.130/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>代理出问题了</title>
    <link href="https://43.143.214.130/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/"/>
    <id>https://43.143.214.130/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/</id>
    <published>2022-10-08T02:06:21.000Z</published>
    <updated>2022-10-08T02:52:03.849Z</updated>
    
    <content type="html"><![CDATA[<p>如果你也出现了“<strong>使用代理不能上网，不用代理却可以上网</strong>”的问题，也许这篇博客会对你有帮助。（<strong>本篇文章不涉及计算机网络的知识</strong>，稍微了解一些计算机概念的同学即可阅读。因为本人计算机网络课程也还没学到什么东西，我自己是可以理解的）</p><p>今天打开电脑正要写作业，打开浏览器发现网络无连接，大概显示的是代理出问题或者防火墙之类的。但是看网络连接（校园网）是正常的。于是手机搜索了这个问题。网络上的指导是设置—&gt;网络和Internet—&gt;代理中，<strong>关闭手动设置代理</strong>。这一步的原理很简单，因为我<strong>没有挂VPN，但是电脑设置却开启了代理</strong>，那我自然没法上网，因为找不到代理嘛。</p><p>于是关闭手动设置代理，<strong>开始上网，没问题</strong>。</p><p>但是这次写作业有翻墙的需要，所以就需要挂VPN，于是像往常一样<strong>挂上VPN，网络又挂了</strong>，显示无法连接。（其实最后发现原因很简单）</p><p>网络上的教学只能说也是鱼龙混杂。</p><p>有的还是教你关闭手动开启代理，这个我试了没有用，因为关闭代理设置之后虽然可以上网，但是挂上VPN之后代理会自动打开，还是出问题。</p><p>我以为是我电脑出问题了。因为有很多人说是如果没有关VPN就关闭电脑，开启电脑的时候会自动寻找代理，就会出问题。但是这不是我问题的答案。</p><p>我一开始以为：电脑设置里面的代理和我挂VPN的代理是两条路，理想状态应该是挂了VPN但是电脑没开代理设置，所以我以为我的电脑出问题了会自动打开代理，我应该想办法关闭这个设置。当然这是错误的。</p><p>更有甚者说是还要打开注册表删除一些东西，还好我够懒，没有这么做。</p><p>看到了另一条路：打开IE浏览器，打开工具栏，选择Internet选项，选择连接栏，打开局域网设置，把代理服务器那边打开。（如下图所示）</p><p><img src="/2022/10/08/%E4%BB%A3%E7%90%86%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/i1.png" alt="image1"></p><p>还说其他浏览器也一样，都可以通过IE浏览器设置，这里我就觉得不靠谱。凭什么IE浏览器可以设置其他浏览器。我看着Internet选项也很眼熟，想想这不是设置里面那个嘛。于是直接打开菜单栏搜索Internet选项，就能打开这个设置了。</p><p>所以说我感觉这里的笔者根本不知道为什么要这么做，实际上打开Internet选项和IE浏览器有什么关系呢？搞得评论区很多人说没有IE浏览器怎么办，误人子弟！</p><p>回归正题，这样打开设置也没用，还是不能上网。</p><p>多试了几次我发现VPN、手动代理设置、Internet选项里的局域网设置其实是一体的，打开了VPN就会打开后两者，关闭了后两者VPN自然没有用。总的来说就是<strong>你的VPN实际上和你电脑中关于代理的设置是一体的，而不是我原本以为的电脑代理是正规渠道、我的VPN是旁门左道，所以互相独立</strong>。</p><p>所以回归网络上提供的两种方案，方案一针对的就是你没有挂VPN但是电脑却开了代理设置，这肯定是不能上网的，所以需要关闭代理设置，但是这就不能翻墙了。方案二针对的是你挂了VPN，但是电脑没有开代理设置，这自然也会出现网络问题。</p><p>但是现在我是开了VPN也设置了代理，却无法上网。</p><p>这时候我觉得可能是VPN的问题，于是卸载重装了clashforwindows，想要重新配置VPN。</p><p>重装之后发现保留了配置，但是我想重新配一遍。绑定订阅地址是没什么问题。**选择代理节点这边发现问题了，我选择的代理服务器停用了！**于是换了一个节点，网络正常了！</p><p>所以我的问题是代理服务器已经挂了。所以总结一下：我如果不挂VPN、电脑不设置代理，那么我可以在国内正常上网；我如果不挂VPN、电脑设置代理，自然出bug（方案一）；我如果挂了VPN，电脑不设置代理，也出bug（方案二）；我如果挂了VPN，电脑也设置代理，但是我的代理服务器挂了，我自然也挂了，但是换成正常服务器就可以科学上网了。</p><p>通过这件事，体会到遇到问题不能盲从网络上的解决方案，实际上网络上的人水平不一定高，他们也可能只是碰巧解决了问题，但是不知道原理，这种帖子阅读是没有好处的，不懂原理的解决方案，也许只是症状一致，照着改运气不好会越改越坏。<strong>一定要有自己的判断</strong>。</p><p>当然了，也不能闭门造车，不通过网上这些帖子的指导和个人的试错，我也不可能靠自己总结出这篇博客。</p><p>也许会觉得自己真傻，要是一开始就看看代理节点就好了。但是其实这样也不坏，虽然折腾了一上午，但是对于代理也有了更深刻的认识，挺好的。</p><p>有问题欢迎评论区交流~</p>]]></content>
    
    
    <summary type="html">使用代理不能上网，不用代理却可以上网？</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="代理（科学上网）" scheme="https://43.143.214.130/tags/%E4%BB%A3%E7%90%86%EF%BC%88%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>《云系统的跨数据集时间序列异常检测》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-06T08:23:35.000Z</published>
    <updated>2022-10-12T04:45:09.038Z</updated>
    
    <content type="html"><![CDATA[<p>最近读的这篇论文原名《Cross-dataset Time Series Anomaly Detection for Cloud Systems》，也是一篇CCF A类论文。译作《云系统的跨数据集时间序列异常检测》，应用对象是云系统上的大规模数据集，目标是<strong>时间序列异常检测</strong>，提出的最有价值的思想是<strong>跨数据集检测</strong>。</p><p>以下pdf是个人阅读笔记，欢迎交流指正。</p><p>注：pdf暂时只支持PC端阅读。</p><div class="row">    <embed src="./CrossdatasetAD.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">开题阶段读的第二篇论文~</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Next主题下为文章添加pdf文件</title>
    <link href="https://43.143.214.130/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/"/>
    <id>https://43.143.214.130/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/</id>
    <published>2022-10-03T10:47:06.000Z</published>
    <updated>2022-10-03T11:32:13.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a class="header-anchor" href="#前言：">¶</a>前言：</h4><p>其实之前就有想过应该给自己的博客添加<strong>在文章中附带文件的功能</strong>，当时想过如果有一些笔记可以直接放到博客的文章里，不过一直没有刚需就没有动手。</p><p>最近刚参与的科研项目在文献调研阶段，读了一些论文记了一些笔记，想着可以分享到博客上来（不过这种行为是不是允许，后续还要问问实验室的师兄，不过暂时本博客也没有公开，所以先放着）。</p><p>其实添加这个功能很简单，网络上的教程也很多，但是热度高的基本都不完备，跟着做了很多遍都没成功，一度让我怀疑是不是我的Hexo版本不支持这个功能。不过后来改用Google搜索，看了很多篇帖子之后，完成了任务，在这里进行总结与梳理。</p><p><strong>注意：本人使用的是Hexo的Next主题，其他主题也许有不同，但是应该可以参考。</strong></p><h4 id="正文："><a class="header-anchor" href="#正文：">¶</a>正文：</h4><h5 id="1-下载相关插件"><a class="header-anchor" href="#1-下载相关插件">¶</a>1.下载相关插件</h5><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></tbody></table></figure><p>有的方法这一步就告诉你可以使用这个插件的功能了</p><p>说是按照</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 本地文件地址/网页链接 %}</span></span><br></pre></td></tr></tbody></table></figure><p>这个格式就可以展示pdf了。</p><p>有的人可能会成功，但是从逻辑上来说，这样显然不对。</p><p>对于我使用的Next主题来说，默认的配置是禁用pdf，所以需要对主题文件配置进行修改。</p><h5 id="2-修改主题配置文件"><a class="header-anchor" href="#2-修改主题配置文件">¶</a>2.修改主题配置文件</h5><p>在根目录的themes文件夹下，打开你的主题文件夹，再打开_config.yml文件。</p><p>搜索pdf，找到如下图所示的位置：</p><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i1.png" alt="i1"></p><p>这里的enable默认是false，也就是不支持显示pdf文件，需要改成true。不然再怎么设置都显示不了pdf文件。</p><p>还需要注意，<strong>我的配置文件当中默认只设置了height</strong>，即显示区域的高度。如果不做任何修改，那么我hexo s的时候显示还是正常的，但是hexo d之后显示区域宽度极小，非常奇怪。</p><p>所以在这里，<strong>建议大家添加一条宽度设置</strong>，如下图所示：</p><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i2.png" alt="i2"></p><p>（这个高度和宽度的参数取决于个人喜好）</p><h5 id="3-顺便说一下便于文件管理的功能"><a class="header-anchor" href="#3-顺便说一下便于文件管理的功能">¶</a>3.顺便说一下便于文件管理的功能</h5><p>在我们写一篇文章的时候，可能需要调用各种各样的图片、文件等。</p><p>如果不进行这一步的设置，也许你写一篇文章，通常会先</p><figure class="highlight gauss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="built_in">title</span></span><br></pre></td></tr></tbody></table></figure><p>于是生成一个以title为名的md文件。</p><p>当然，这样你也可以调用图片、文件，按照制定格式输入图片、文件的路径即可，但是这样的文件管理显得杂乱无章。</p><p>所以，可以做如下修改。</p><p><strong>打开站点的配置文件（不是主题的配置文件）</strong>，找到post_asset_folder，设置为true。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>这一修改的意义就是，在你hexo new一篇文章的同时，在文章所在的文件夹同时创建一个与文章的同名的文件夹。你可以把该文章需要的图片、文件放在该文件夹中，再进行调用。（这样是不是就规整了很多呢）</p><h5 id="4-调用pdf文件的格式"><a class="header-anchor" href="#4-调用pdf文件的格式">¶</a>4.调用pdf文件的格式</h5><p>本地文件</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> pdf文件路径 %}</span></span><br></pre></td></tr></tbody></table></figure><p>网络文件</p><figure class="highlight django"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 网络文件url %}</span></span><br></pre></td></tr></tbody></table></figure><h5 id="5-效果显示"><a class="header-anchor" href="#5-效果显示">¶</a>5.效果显示</h5><p><img src="/2022/10/03/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0pdf%E6%96%87%E4%BB%B6/i3.png" alt="i3"></p><h5 id="6-注："><a class="header-anchor" href="#6-注：">¶</a>6.注：</h5><p>有两点想提醒大家</p><p>（1）虽然有的朋友用的是Typora这种及时显示效果的编辑器，但是调用pdf文件并不会像调用图片一样，在编辑的时候就显示效果，你看到的只是一行代码。</p><p>（2）这种方法目前只支持PC端阅览，不支持手机端。（不过就这样将就吧）</p>]]></content>
    
    
    <summary type="html">曲折的为文章添加pdf文件的历程。</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://43.143.214.130/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>《用自监督的对比预测编码进行时间序列变化点检测》个人笔记</title>
    <link href="https://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2022-10-03T08:09:46.000Z</published>
    <updated>2022-10-06T08:15:38.095Z</updated>
    
    <content type="html"><![CDATA[<p>该论文原名《Time Series Change Point Detection with Self-Supervised Contrastive Predictive Coding》，是CCF A类论文。译作《用自监督的对比预测编码进行时间序列变化点检测》。个人阅读主要是为了了解<strong>异常检测</strong>的相关方法。</p><p>由于担心侵权问题，不能展示原文，大家若有需要，直接利用Google学术搜索即可，很容易获取。</p><p>以下为个人笔记，欢迎交流和指正。</p><div class="row">    <embed src="./TSCPD.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">分享该论文（CCF A类）的个人阅读笔记。</summary>
    
    
    
    <category term="科研" scheme="https://43.143.214.130/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="异常检测" scheme="https://43.143.214.130/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    <category term="自监督" scheme="https://43.143.214.130/tags/%E8%87%AA%E7%9B%91%E7%9D%A3/"/>
    
    <category term="对比预测编码" scheme="https://43.143.214.130/tags/%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>转专业终于尘埃落定</title>
    <link href="https://43.143.214.130/2022/09/27/%E8%BD%AC%E4%B8%93%E4%B8%9A%E7%BB%88%E4%BA%8E%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A/"/>
    <id>https://43.143.214.130/2022/09/27/%E8%BD%AC%E4%B8%93%E4%B8%9A%E7%BB%88%E4%BA%8E%E5%B0%98%E5%9F%83%E8%90%BD%E5%AE%9A/</id>
    <published>2022-09-27T02:29:46.000Z</published>
    <updated>2022-09-27T06:57:04.784Z</updated>
    
    <content type="html"><![CDATA[<p>“转专业终于尘埃落定”这句话可以说是不那么准确，毕竟课程替代还差一门暑期实训（计网还没有登分）。不过虽然这门课是5学分任务量，但是由于开课在暑假，所以能不能替代我倒持平常心对待，所以也算是尘埃落定了吧。</p><p>转专业的顺利结束对我来说标志着两条“焦虑线“的结束。</p><h4 id="转专业焦虑线"><a class="header-anchor" href="#转专业焦虑线">¶</a>转专业焦虑线</h4><p>第一条”焦虑线“应该始于今年的三月份，当时大二下学期刚开始，在虽然经过一学期努力已经从53进步到了41，身处保研名额在30左右的计科，又身无任何奖项的我，保研的希望还是非常渺茫，但是希望渺茫又如何，还是得尽力争取。当时真是一想到自己的处境就特别难过和焦虑，”难道努力三年最后还是要考研吗？考研考不上怎么办？…”。当时只能劝自己别想，因为中学时代我就明白了，焦虑和空想是不能解决问题的，反而会影响自己解决问题，但是我同时也明白我是无法控制自己完全不想的。所以就坦然接受我会焦虑这件事，不因为焦虑了而焦虑，同时尽量避免去想自己的处境，闷头苦干便是。再加上当时课业真是极其繁重，想想当时的处境都还是觉得艰难。</p><p>在一次和小刘的闲聊当中提到了”转专业到软件“这个当时看起来极其荒诞的想法，当时觉得也就是开开玩笑罢了。不过虽然只是开玩笑，但是无聊的时候还是要到了软件工程的培养计划。对比了一下自己的培养计划，发现在计算机学的课程几乎可以说是完全覆盖软件的课程，感觉有了可行性，于是想到了课程替代。当时觉得课程替代是一件很难办的事情，所以也就抱着试试的心态问了软件学院教学班的王来忠老师。记得是在一个午觉刚醒的下午，王老师告诉我应该可以替代，甚至学分低的也能替代学分高的（课时不少的情况下），并表示对我转专业的欢迎。当时看到消息真是喜出望外，转专业这件事有了可行性。</p><p>能转专业到软件了，这对当时的我来说简直像梦一样。不像计科这样卷的学习环境、更合理的课程安排、更专注于代码…。不过焦虑的人总是有得焦虑。一方面强迫症的我纠结于”应该可以“这句话，虽然我知道教学办的老师对于这件事也只能给个大概的答复，但是对我来说确实确定的答复才能避免转到软件需要补大量的课甚至不如留在计科的情况。对我来说，延毕一年学已经学过的课程，倒不如考研。记得很清楚，当时和小刘说就怕是给我一个很好的梦，最后还是要梦醒，继续留在计科，小刘安慰我会好的。另一方面我是一个常常怀疑自己的人，我担心自己因为转专业到软件的美好处境而松懈结果最后确实留在计科，处境更糟糕了…</p><p>当把想问的事情问清楚之后就决定不再纠结转专业的事情，专心提高在计科的学分绩。毕竟提高在计科的学分绩，不管对于通过转专业考核、还是争取在计科保研，又或是转专业课程替代后排名更进一步，都是十分必要的。</p><p>因此差不多到五月，也只是偶尔纠结一下，不太影响在计科的学习。其实知道很有可能可以转专业之后，我的心态变好了很多，感觉好像有了退路一般，在计科学习也不焦虑了，就算最后没转，应该对我都是有好处的。</p><p>五月底横生变故，他们闹着要延期考试回家，延期考试就意味着要延期转专业，这对我来说实在太影响规划了，甚至可能让我没法转专业。再加上当时还有暑期学校的纠结，一度以为转专业要失败了。不过还是要努力寻求改变吧。于是向教务处副处长林锴老师写了几封信，表达了关于大二年级提前转专业的合理性，老师也认为合理，并同意推动，甚至还推动成功了，说在八月中旬考核。不过最后还是被部分学院拒绝了，定位开学两周之后转专业。</p><p>于是就是令人死亡的考试周。</p><p>考试周结束，在计科排名到了29，19.7%，也算很有希望保研了。但是还是决定转专业到软件。</p><p>考试周之后还在计科上了不到两周的课，才转到软件学院来。</p><p>记得转专业面试的前一晚，听一位和我有同样想法的计科同学问了于婷老师能否课程替代，答曰低分不可替代高分，当时一度以为又可能要失败了，当时又联系不上王来忠老师，特别着急。但是在面试的上午，找到了学校负责课程替代的老师，得知低分可以替代高分，决定权在学院之后彻底放松。在面试成功之后询问了新的教学办老师沈老师，她也表示可以课程替代，于是就决定转专业了。</p><p>转专业考核分数是全场最高，还不错。就差课程替代了。</p><p>不过课程替代也是一拖再拖，一开始以为面试结束就能替代，结果要调整完学籍。以为调整完学籍就可以替代，结果要选完课。只好苦苦等到26上午马上选了课之后提交申请。过程出奇的顺利。当初以为课程替代要找每一门课的双方教师签字，实际上教务老师几乎没怎么审核就通过了。（不过也是软件学院的老师放的宽，计科的课程替代可没这么容易）。等到学校也审核通过之后，看着两排绿色的通过字样，我的心终于放下了。</p><p>等了一天之后，向于婷老师查了成绩，89.79，比在计科还高了0.05，专业排名第五。</p><p>转专业终于尘埃落定了。</p><h4 id="暑期焦虑线"><a class="header-anchor" href="#暑期焦虑线">¶</a>暑期焦虑线</h4><p>这条线在其他帖子也说过了，就不再多说。大概就是从暑假开始，要忙论文、报告、大作业结课，要参加暑期实训，要学车，要准备开学考，要准备转专业，事情一件压着一件，每一件都必须成功。当时真的觉得很焦虑，八月底的时候很想一下子跳到九月底来看看，我成功了没有。当时焦虑的时候就和自己说”给自己一点时间“，耐心地一件一件事解决清楚。</p><p>于是乎，大作业结课的并行拿了99，论文结课的毛概拿了91，暑期实训完美结束，学车也速通拿证，开学考基本考得都很好属于成绩最好的一个学期，eamis上学分绩直接到了90.02，转专业也成功且顺利，也补上了没在软件上的课。</p><p>想到这些，我好是骄傲，感觉我的人生好久没有某段时间这么成功了。从竞赛到高考到二次选拔到此前的考试，感觉做什么都不能成功，让我觉得努力不一定能成功，所以我付出努力也不敢期待回报。不过还是要感慨，塞翁失马焉知非福，也正是这一次又一次地失败，才让我告别了物理。这次，这一段时间，努力真的得到了回报，我的焦虑、我的不断麻烦老师、我的熬夜，都得到了回报。</p><p>不过成功不能仅归功于自己。转专业成功离不开贤惠女友小刘刘的支持、安慰、建言献策，也离不开众多老师（谢茂强老师、林锴老师、王来忠老师、沈舒尹老师）的帮助，还有家里人（姐姐、爸妈）的支持。</p><p>不过也不能因为短暂的成功就得意忘形，高中会失败，也是因为自视甚高，太飘了。在软件学业压力小，老师不push，处境也更好，更需要自觉自控。这学期的目标就是稳住第五，刷科研经历，准备美赛，多写代码。</p><p>好了，适当地自我对话很重要，但是我毕竟是个程序猿，不是文科生，文字适可而止。接下来就要开始努力学习咯。</p>]]></content>
    
    
    <summary type="html">为转专业而煎熬的半年终于结束了。</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
    <category term="自语" scheme="https://43.143.214.130/tags/%E8%87%AA%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>调整Ubuntu显示界面</title>
    <link href="https://43.143.214.130/2022/09/24/%E8%B0%83%E6%95%B4Ubuntu%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2/"/>
    <id>https://43.143.214.130/2022/09/24/%E8%B0%83%E6%95%B4Ubuntu%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2/</id>
    <published>2022-09-24T12:46:57.000Z</published>
    <updated>2022-09-24T13:03:23.441Z</updated>
    
    <content type="html"><![CDATA[<p>先声明本人的VMWare是16pro，Ubuntu版本22.04。</p><p>大家安装Ubutu虚拟机经常会遇到的第一个问题就是显示界面太小。通常查找到的解决方案就是安装增强功能（VirtualBox）和VMWare tools（VMWare）。</p><p>但是我这么做之后，只是显示界面全屏了，图标和文字还是不够大。</p><p>第二次尝试是调节分辨率，在settings的display中，调节分辨率到合适的大小，会改善很多，但是还是不够。</p><p>第三个尝试就是调节缩放比例，但是settings的display中只支持100%、200%、300%，试了200%，发现图标文字变大很多，但是太大了。最好是1.5这样，但是settings里面不支持调节（Ubuntu22.04是这样，之前的版本好像还可以）。</p><p>这一步的解决方案是：在 /usr/share/glib-2.0/schemas目录下</p><p>修改文件 org.gnome.desktop.interface.gschema.<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020">xml</a><br>找到text-scaling-factor定义, default的数值改为1.65（缩放比例，根据自己电脑调节）</p><p>修改文件 com.<a href="https://so.csdn.net/so/search?q=ubuntu&amp;spm=1001.2101.3001.7020">ubuntu</a>.user-interface.gschema.xml<br>找到text-scaling-factor定义, default的数值改为1.65（缩放比例，根据自己电脑调节）</p><p>然后执行命令"glib-compile-schemas /usr/share/glib-2.0/schemas/"，重启后缩放比例生效。</p><p>这一步参考了CSDN博主「旨酒当歌」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_16056397/article/details/114253446">https://blog.csdn.net/qq_16056397/article/details/114253446</a></p><p>这里面有一些细节：首先是usr直接在资源管理器当中搜索不到，在命令行cd /usr即可；其次修改这两个文件需要sudo权限，不然改不了。</p><p>经过三种方法的尝试，最终效果如下图所示，挺满意的了，也不用像老年机一样吧（强迫症自语）</p><p><img src="/2022/09/24/%E8%B0%83%E6%95%B4Ubuntu%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2/%E8%B0%83%E6%95%B4%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2.png" alt="image"></p><p>和主机基本一致。done！</p>]]></content>
    
    
    <summary type="html">调整Ubuntu显示界面有哪些方法？</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://43.143.214.130/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux当中判断两个文件夹是否相同</title>
    <link href="https://43.143.214.130/2022/09/24/Linux%E5%BD%93%E4%B8%AD%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/"/>
    <id>https://43.143.214.130/2022/09/24/Linux%E5%BD%93%E4%B8%AD%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/</id>
    <published>2022-09-24T08:51:13.000Z</published>
    <updated>2022-09-24T08:58:51.438Z</updated>
    
    <content type="html"><![CDATA[<p>作业中遇到的问题：怎么判断Linux当中两个文件夹是否完全相同？</p><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ diff -u/-r/-N/-<span class="keyword">a</span> dir1 dir2</span><br><span class="line">　　-<span class="keyword">a</span> Treat all <span class="built_in">files</span> <span class="keyword">as</span> <span class="keyword">text</span> <span class="keyword">and</span> compare them <span class="built_in">line</span>-<span class="keyword">by</span>-<span class="built_in">line</span>, even <span class="keyword">if</span> they <span class="built_in">do</span> <span class="keyword">not</span> seem <span class="built_in">to</span> be <span class="keyword">text</span>.</span><br><span class="line">　　-N, <span class="comment">--new-file</span></span><br><span class="line">　　　　In <span class="built_in">directory</span> comparison, <span class="keyword">if</span> <span class="keyword">a</span> <span class="built_in">file</span> is found <span class="keyword">in</span> only <span class="literal">one</span> <span class="built_in">directory</span>, treat <span class="keyword">it</span> <span class="keyword">as</span> present but <span class="literal">empty</span> <span class="keyword">in</span> <span class="keyword">the</span> other <span class="built_in">directory</span>.</span><br><span class="line">　　-r When comparing <span class="built_in">directories</span>, recursively compare <span class="keyword">any</span> subdirectories found.</span><br><span class="line">　　-u Use <span class="keyword">the</span> unified output <span class="built_in">format</span>.</span><br></pre></td></tr></tbody></table></figure><p>建议使用-r，比较符合逻辑。</p><p>效果如图。</p><p><img src="/2022/09/24/Linux%E5%BD%93%E4%B8%AD%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/image.png" alt="image"></p>]]></content>
    
    
    <summary type="html">怎么判断Linux当中两个文件夹是否完全相同？</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://43.143.214.130/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>我和装虚拟机有仇</title>
    <link href="https://43.143.214.130/2022/09/23/%E6%88%91%E5%92%8C%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%89%E4%BB%87/"/>
    <id>https://43.143.214.130/2022/09/23/%E6%88%91%E5%92%8C%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%89%E4%BB%87/</id>
    <published>2022-09-23T15:22:11.000Z</published>
    <updated>2022-09-23T15:48:02.291Z</updated>
    
    <content type="html"><![CDATA[<p>大二上第一次从zzl口中听说虚拟机，大二下的《并行程序设计》和《软件安全》两门课也是和虚拟机打了太多交道，装过的虚拟机恐怕也有五台了。软件的同学倒是本学期第一次装虚拟机。但是我却在这上面花费了一天有余的时间。感觉什么古怪的问题都被我碰上了。时间有限，简单梳理一下思路吧。</p><p>一开始按照老师的要求：用VirtualBox装Ubuntu22.04。首先，VirtualBox官网下载实在过于慢，于是去清华源下载该安装包，此处可能埋下隐患。Ubuntu22.04倒是从官网下载非常方便。接着就是按部就班地配置，但是启动虚拟机就花费了非常非常久，接着开始安装Ubuntu，重启等等，就直接到了傍晚。晚上上课的时候终于打开了Ubuntu，但是反应极其慢，令人发指，完全不适合工作。</p><p>感觉是VirtualBox的问题，于是问老师能不能用VMWare替代。老师的说法是：首先要有资源，其次同样要增强功能（其实对应的是VMWare tools），再次是可能会有一些小不同，但是可以用。</p><p>实在不想折腾virtualbox了，于是改用VMWare，只能说VM过于强大，装虚拟机非常流畅，安装Ubuntu也快了不少，只能说确实是VB的问题，毕竟我是用同一个镜像源。</p><p>安装了不代表完事大吉。VM tools也需要配置好，否则不能实现主机虚拟机复制粘贴，并且显示也会有问题。但是工具栏的VM tools重新安装是灰色的，不能用。只能手动安装。手动安装就需要去找对应的iso文件，这一步倒没什么。找到了VM tools的压缩文件之后还需要进行解压和安装，按部就班即可。但是VM tools并没有生效。CSDN上需要输入两条命令，类似更新。接着发现源地址失效了，又需要改源地址。但是改源地址需要复制大段代码，主机虚拟机互相不能粘贴，所以要用虚拟机访问清华源。更改源之后，基本就可以了。操作之后记得重启。</p><p>最后实现了VM tools生效，复制粘贴可以了，屏幕也可以全屏了。但是图标和文字还是比较小，但是大体就能用了。</p><p>只能说绝大多数时间都浪费在了VirtualBox上，VMWare虽然碰上一系列问题，但是好还是很快，希望后续不要有什么隐患吧。</p><p>以上。</p>]]></content>
    
    
    <summary type="html">装虚拟机明明是个很简单的事，为什么老是折腾半天？</summary>
    
    
    
    <category term="技术" scheme="https://43.143.214.130/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="虚拟机" scheme="https://43.143.214.130/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>《父亲》——梁晓声</title>
    <link href="https://43.143.214.130/2022/09/07/%E3%80%8A%E7%88%B6%E4%BA%B2%E3%80%8B%E2%80%94%E2%80%94%E6%A2%81%E6%99%93%E5%A3%B0/"/>
    <id>https://43.143.214.130/2022/09/07/%E3%80%8A%E7%88%B6%E4%BA%B2%E3%80%8B%E2%80%94%E2%80%94%E6%A2%81%E6%99%93%E5%A3%B0/</id>
    <published>2022-09-07T02:57:58.000Z</published>
    <updated>2022-09-07T03:45:38.983Z</updated>
    
    <content type="html"><![CDATA[<p>简介（摘自微信读书）：</p><p>《父亲》用朴素真挚的文字记录了梁晓声与自己父亲之间真实发生的故事。全家人都靠他出卖体力供吃穿，不善于表达的父亲总是默默吞下生活中的所有苦。他的愚昧与狭隘曾让自己的孩子遭受苦难、、让家人之间有了隔阂，但当他开始老了他也终于慢慢对自己和家人有了新的理解。当一个儿子步入中年时，父亲在他眼里已需要依附于自己的人格才能继续在社会上存在，这时如何让父亲重新获得与自己比并存的人格已是父子关系中的头等大事。</p><p>语句摘抄：</p><ul><li>中国的贫穷家庭的主妇，对困苦生活的适应力和忍耐力是极可敬的。她们凭一种本能对未来充满憧憬。虽然这憧憬是朦胧的，盲目的，带有浪漫的主观色彩的。期望孩子长大成人后都有出息，是她们这种憧憬的萌发基础。</li><li>一天晚上，我亲眼看见，父亲将一包中草药偷偷塞进炉膛里，满屋弥漫一种苦涩的中草药味。父亲在炉前呆呆站立了许久，从炉盖子缝隙闪耀出的火花，忽明忽暗地映在父亲脸上。父亲地神情那般肃穆，肃穆中呈现一种哀伤…</li><li>父亲侧过脸，低下头，不再吼什么。许久，父亲长叹了一声，那是从心底发出地沉重负荷下泄了气似的长叹。</li><li>报答这种心理，在父子关系中，其实质无异于溶淡骨血深情的稀释剂。它将最自然的人性最天经地义的伦理平和扭曲为一种最荒唐的债务。而穷困之所以该诅咒，不只因为它造成物质方面的债务，更因为它造成精神上和情感上的债务。</li><li>列车开动前，父亲从车窗口探出身，对哥哥说：“老大，听爸的话，别考大学！咱们全家七口，只我一个挣钱，我已经五十出头了，身板一天不如一天了，你应该为我分担一点家庭担子了啊！”<strong>父亲的语调中，流露出无限的苦衷和哀哀的恳求。</strong></li><li>三年大学，我一次也没有探过家，为了省下从上海到哈尔滨的半票票价。也为了父亲每个月少吃一块臭豆腐，多吃一盘炒菜。</li><li>我又几年没探家了。我与父亲又几年没见面了。我已经三十五岁了，可以说是一个中年人了。电报使我心中涌起了一个中年人对自己老父亲的那种情感。**人的回忆，是可以随着年龄的增长而改变“焦距”的，好像照片随着时间改变颜色一样。**回忆往事，我心中对父亲的谴责少了，对自己的谴责反而多了。我毕竟没有给过父亲多少一个儿子对父亲的爱啊！</li></ul>]]></content>
    
    
    <summary type="html">考试周结束好好看书吧！</summary>
    
    
    
    <category term="书海徜徉" scheme="https://43.143.214.130/categories/%E4%B9%A6%E6%B5%B7%E5%BE%9C%E5%BE%89/"/>
    
    
    <category term="阅读笔记" scheme="https://43.143.214.130/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在8.25拿到了驾驶证</title>
    <link href="https://43.143.214.130/2022/09/06/%E5%9C%A88-25%E6%8B%BF%E5%88%B0%E4%BA%86%E9%A9%BE%E9%A9%B6%E8%AF%81/"/>
    <id>https://43.143.214.130/2022/09/06/%E5%9C%A88-25%E6%8B%BF%E5%88%B0%E4%BA%86%E9%A9%BE%E9%A9%B6%E8%AF%81/</id>
    <published>2022-09-06T00:46:46.000Z</published>
    <updated>2022-09-06T02:40:44.374Z</updated>
    
    <content type="html"><![CDATA[<p>高考完的暑假没有及时学车真是令人遗憾。上了大学之后，爸妈去了上海，每次放寒暑假总是要先在上海待上一半的时间，再去将乐待一段时间，有时候有集训还要提前回天津，这样零碎的时间在哪个地方都学不了车。学期内光是课业就忙得喘不过气了，更别说学车了，再加上最近一两个学期封校更是学不了。所以一直不知道自己什么时候可以学车，到了工作估计更忙了。</p><p>所幸大二下学期因为疫情，学校提早在5.30放我们回家了，大三上学期又是在8.29开学，再加上上海疫情尚未完全清零，所以前后也有将近三个月的时间在将乐，于是决定要学车，想在一个暑假拿到驾驶证。</p><p>虽然说有三个月的时间在将乐，但是居家隔离14天、大作业论文结课、暑期实习实训、复习开学考，这样一扣，其实能学车的时间实在是不多。</p><p>最后在六月二十多去驾校报了名，当时想着在实习实训之前把科目一考了。但是恰巧将乐的体检系统需要更新，等了大半周也没更新好（不得不吐槽小地方效率之低，更新体检系统又不是开发系统），最后在实习实训上课的时候跑去沙县做了体检（实际上流程极为简单，基本相当于只是看是不是红绿色盲）。好不容易算是报名成功了，结果约科目一又特别难约，记得当时大概是六月底开始约，只能约到7.13（大概两周之后）。当时驾校的老板和我说估计能让我暑假考个科目二。哎，本想着一个暑假学完，但是也没办法了，这事儿不宜拖着，大不了寒假再回来学科三科四。</p><p>于是就开始先上暑期实习。本来一般人科目一是需要提前比较久开始刷题的，当时教练来问我的时候我还完全没打算开始呢，主要是实习实训费时间。在科目一考前一天半，觉得不应该再拖了，开始学习（没有上实习实训的课程）。首先看b站上的相关教学视频（技巧分享&amp;知识点总结）</p><p>[]: 【新规后科目一考试考点汇总】<a href="https://www.bilibili.com/video/BV1ET4y1k7dc?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a">https://www.bilibili.com/video/BV1ET4y1k7dc?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a</a></p><p>接着开始刷题（好像是两千多道吧），考前一晚再做几套模拟题。由于科目一的知识点比较细碎，准备时间又不充裕，所以最后做模拟题的时候开始分数在88左右，最后几遍在92上下，还是有较大的不过的风险的。但是没办法，硬着头皮上。</p><p>考科目一的时候记得前60题就错了8题，意味着后面40题最多只能错2题，所以做最后40题的时候基本手都是抖的。不过所幸最后40题全对，就这样科目一过了。</p><p>本来没考科目一就可以开始练车了，但是因为实习实训一直没有开始。差不多在20号左右，实训的项目已经做的差不多了，就联系教练开始练车。也就21晚上去学了一下方向盘和挂挡，后来教练就去沙县了，到24实训结束才开始正式练习科目二。</p><p>其实科目二挺简单的，我记得倒车入库第一天我就没有问题了，其他项目也很好学，但是教练估计是为了保险起见吧。我算了算，前后科目二练了15次，实际上我觉得学会科目二只需要不到5次，剩下的主要就是不断地练习了。约了8.12的考试。这期间队里要组织21号开始返校集训，我想着这个暑假把车学完再加上复习的压力，就没去集训。这时候驾考的压力来了，一方面是时间上的压力，要想暑假拿证不仅要自己学的快还要能及时约到考试、更重要的是一科都不能挂，只要挂了就只能寒假重来了；另一方面是金钱的压力，考科目二花了六百，考科目三花了一千，只能说驾校确实有点黑吧；还有就是驾校的练车体验实在不好，实在不想没有意义地去驾校重复练车。</p><p>科目二顶着压力也在第二把满分通过了。详细经历见帖子</p><p>[]: <a href="https://yangyy.top/2022/08/12/%E7%A7%91%E7%9B%AE%E4%BA%8C%E6%BB%A1%E5%88%86%E9%80%9A%E8%BF%87%E4%BA%86%E8%80%B6%EF%BC%81/">https://yangyy.top/2022/08/12/科目二满分通过了耶！/</a></p><p>科三的安排就是去沙县练两天（实际也就一天半），第三天直接考试。提前一天把灯光和路线背了、再把教学视频给看了，然后就开始练车。教练也觉得我开的好，每一轮都让我第一个开，让其他人看。记得第一把不熟悉，扣分项目比较多，第二把就满分了，后来基本回回满分，偶尔挂科。记得练了两天也就挂了三四把吧，同伴都觉得我厉害（后来三个人也只有我过了）。科三有机会再开个经验帖吧，过了太久不是太想记录了。考试等待过程很漫长，几乎是最后上车的。路线1起点1，很不错，其实1~3号线我都可以，起点1就很舒服了。就正常开，考试过程不算太紧张，靠边停车扣了10分，可以接受，只是当时不知道挂了没，所以最后一段开的很焦虑，听到“考试成绩合格，请回中心打印成绩单”才松了一口气。</p><p>考完科三其实就相当于领证了。本来约不到27之前的科目四，刚好驾校帮我争取到了24的名额。复习之余花了不到一天的时间准备，最后科四好像是96分通过。</p><p>回顾整个学车的历程，也算是坎坷较多，压力也挺大的。好在自己也算勤学苦练再加上应该算比较聪明吧😁，总体很顺利。7.13科目一，8.12科目二，8.20科目三，8.24科目四，8.25拿证。实际准备时间大概是科一一天半，科尔15天，科三两天，科四半天，加起来19天吧，算是很快的了，和我一起或者比我早学车的基本这个假期都没拿证。</p><p>其实我特别喜欢开车，拿到驾驶证就一直想开车上路。在走之前开了三趟姨姨家的车，感觉非常爽，希望后面还有机会多开车。😊</p>]]></content>
    
    
    <summary type="html">回顾一下学车的历程。</summary>
    
    
    
    <category term="生活经验" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="学车" scheme="https://43.143.214.130/tags/%E5%AD%A6%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>延期考试周终于结束了！</title>
    <link href="https://43.143.214.130/2022/09/05/%E5%BB%B6%E6%9C%9F%E8%80%83%E8%AF%95%E5%91%A8%E7%BB%88%E4%BA%8E%E7%BB%93%E6%9D%9F%E4%BA%86%EF%BC%81/"/>
    <id>https://43.143.214.130/2022/09/05/%E5%BB%B6%E6%9C%9F%E8%80%83%E8%AF%95%E5%91%A8%E7%BB%88%E4%BA%8E%E7%BB%93%E6%9D%9F%E4%BA%86%EF%BC%81/</id>
    <published>2022-09-05T01:27:57.000Z</published>
    <updated>2022-09-05T15:26:48.928Z</updated>
    
    <content type="html"><![CDATA[<p>煎熬的延期考试周始于8.30终于9.2，结束之后由于种种任务与放松计划迟迟没有开始写博客，今天终于有机会“提笔”。</p><p>考试周的安排在这里展示一下：</p><p><img src="/2022/09/05/%E5%BB%B6%E6%9C%9F%E8%80%83%E8%AF%95%E5%91%A8%E7%BB%88%E4%BA%8E%E7%BB%93%E6%9D%9F%E4%BA%86%EF%BC%81/i1.jpg" alt="image"></p><p>我需要考的课程是算法导论、数据库系统（笔试、上机）、计算机组成原理、高级英语、人工智能导论、软件安全，算是四天七门吧，英语来不及准备，实际上是复习五门专业课。其实不只是考试的这一周很煎熬，大概从8.10开始，也算煎熬了大半个月吧。</p><p>造成考试周复习压力如此大的主要原因还是在于自己在假期还是有些松懈。</p><p>实际上实训7.24就结束了（5.30从天津回家到7.24正式放假的这段日子实在是没有空闲，结课大作业、论文、驾考报名体检、科目一考试、实习实训）。大概从8.9开始正式复习。这中间半个月的时间去平潭岛旅行了一趟，剩下的主要成就就是学车和锻炼了。其实学科目二那段日子也挺难集中精力学习的，要是上午早早去练车，下午基本就要多补一会觉，傍晚健身一下，晚上基本也没什么时间了；如果是下午练车倒还好，上午可以专心学一会，晚上就需要健身了。其实当初打算八月初就开始复习了，但是当时想着，平时期末周之前一边上课写作业也就提前三四周开始复习，现在虽然很多都忘了，但是应该提前三周就够了吧。于是从8.9才开始正式复习。</p><p>其实现在回忆起来，只能说确实可以做的更好，但是也没什么可遗憾的，毕竟漫长的暑假给自己放个假也是我的需求，再加上这半个月的时间也搭建了自己的博客并且学了车，也不算虚度。</p><p>不过当时没有想太多，以为二十天的时间复习五门课应该是足够了，实际上还需要花两天的时间去沙县考科目二、花三天的时间去沙县考科目三、需要花一天的时间准备科目四，当时也没有预料到计组作业那么多（本以为第四、五章的课后作业顶多也就三十多题，实际上最后翻了书才发现是三十几道大题、一百多道小题，最后作业就写了四十多页，再加上复习成果、设计模拟卷、CPU的实验报告），离开家里又避免不了会有一些饭局（亲戚的饭局很难避免，朋友分别前的饭局都被我推了），这样一算好像已经不到15天的时间可以复习了，甚至是接近只有十天。</p><p>大概在8.15之后开始发现任务非常繁重，压力开始大了起来。因为学车的时间不可调和、考试周任务繁重，就连队里的集训都缺席了（后来和朱妈聊了，不可避免失去了一些东西，但是我不觉得后悔）。</p><p>本来计划的是早早开始复习，精心准备，考好开学考，结果却是复习时间非常紧凑，基本不可能准备周全。</p><p>暑假开始的时候，想着这一个暑假需要先把大作业、论文结课的课程做好、需要拿到驾驶证、需要在实习实训拿到不错的分数、需要考好开学考、需要完成转专业和课程替代，实在是环环相扣、“一山放过一山拦”呀。只能按部就班，后来大作业和论文结课的课程分数都很好（主要就是计算方法不是太满意，但是也还好）、实习实训也顺利结束（虽然还没有公布分数，但是答辩时候给老师留下了不错的印象，应该还好）、转专业也推迟到了开学以后。当时主要面临的压力就是驾考和开学考。关于驾考还是再开一个帖子记录吧。反正当时也算是压力蛮大的，只能在心里复述那句话“你要给自己一点时间”。一下子高三的记忆就涌现出来（这里也说说题外话吧），当时刚考完竞赛回来，很多科目都比较差，数学补了一段时间都还是停留在110+的水平，内心十分焦虑，于是去找孔老师分析卷子+谈心，只记得孔老师和我说“你没有什么问题，要给自己一点时间”。其实补课程确实是一件需要耐心的事，后来成绩提不上去的时候就想着这句话，虽然最后高考总成绩不理想，但是数学也考了139，当时模拟考也考过145，也算是部分的如愿以偿吧。这次要做的事情这么多，算上转专业的焦虑都得有半年的时间了，八月份的时候特别想一下子到十月份，那时候如果事事顺利应该会很轻松了吧，“现在”真难过。这时候也同样用那句“给自己一点时间”安慰自己。不得不感慨孔对我的影响之大，也许他并不知道，但是这句话在这三年的时间里给了我莫大的支撑。</p><p>虽然驾考占用了很多的时间，但是也在25号顺利拿证了，非常开心，速通驾考也让我非常有成就感。</p><p>25号之后就开始全身心备战考试了，算算也就五天的时间可以复习，当时的进度大概是：计组的作业都还没开始，计组还差一大章，算法导论和数据库应该都还不到一半，软件安全和人工智能还没有开始，再加上四天七门考试的紧凑安排，实在是无比焦虑，完全不觉得自己能复习完。</p><p>在此之前我还几乎从未遇到过如此无准备的考试（至少大学没有），之前的考试周基本都是非常细致地复习一遍知识点，然后找往年的卷子做一做，不过效果一般。这次考试前期的安排就是争取提前把计组、数据库、算法复习完，在坐车回天津的路上把计组的作业赶完，然后用考试周的空挡速成人工智能和软件安全（主要是人工智能应该比较像课后题、软件安全有平时整理的复习笔记和样卷，比较放心）。结果也是按着这个计划走了。每一门也都勉强在考前复习完了。</p><p>算法导论在知识点复习完之外，向世辰哥要了往年的题型，结果好多都是按着往年的题型考，考前特地看了摔瓶子，真的考了原题。反正就基本都和预料之中一样，所以做的很顺利，算是做完了，感觉不错，但是选择题恐怕错了两三题，哎，都是改错的，希望会好吧。</p><p>数据库笔试也是往年的题型，虽然不是原题，但是题型基本平时都遇到过，所以也是中规中矩地考，在故障恢复那个大题做的比较乱，但是感觉也还好，数据库上机应该没什么问题，不知道结果如何。</p><p>计组是考前最没底的一门，因为不知道会怎么考。按照张金的上课方式感觉都是比较方法论的东西，实际上具体的设计和计算并不会，做课后题也是一脸懵，也没有往年的题型和卷子可以参考，可以说是非常忐忑了。很担心选择题很多计算、大题和课后题一样，贯穿设计也怕特别难。所幸考前张金老师让我们去看了六道课后题，说是掌握了就没有问题，在nkucs.icu网站上看学长学姐透露张金有过暗示背课后题的情况，所以我特别认真地看了那六道题，虽然最后两题（存储部分）没有全部看懂，特别是关于虚拟存储器那道题，根本不会做，只能赌不会考了。结果上了考场，选择题考的很基础，感觉做的没问题，大题前面三个问题都是原题，所以写的也很顺利，存储器那章考了cache没考虚拟存储器，赌对了（事实上我也不觉得会考那么难），感觉应该没问题吧。最后贯串设计题，考察太空实验舱的计算机系统设计问题，我回答的是异常和中断，利用预测和冗余解决，感觉答得很好。考完计组觉得很不错，希望高分。</p><p>然后是人工智能，实际上时间最紧的一门，考前基本没什么时间复习，所幸老师也按时根据课后题和相应的知识点进行复习，我基本就只是死记硬背了课后题，结果考试全是课后题，感觉应该还不错吧，但是好像选择题也错了两道，麻了，只要纠结就会选错。</p><p>软件安全因为有完整的课堂笔记和复习笔记（因为当时学的非常系统，一方面是老师讲的好；另一方面是自己当时是上课然后复习然后做实验巩固，所以学的扎实）复习起来很快，考前一晚开始复习，熬大夜，那天晚上就睡了四个小时左右吧，早上做了模拟题，也就上考场了。考题很多，20选择20判断5简答2综合，但是做的比较快，复习的基本都考了，前面答得感觉都还好吧，选择判断有一些疑问，但是最后两个简答题没复习到，也没什么遗憾的，实在是来不及。考了数据流分析和Angr污染分析，只能想到什么写什么了。不过如果转专业的话，软件安全不挂就好，再加上大家应该都一样，所以也不甚在意。</p><p>最后是英语，英语的平时分应该是新高，49.5/50，考前盘算着卷面有80以上，总分就上90了，就不会拖后腿了。考的时候感觉还不错，阅读有两个空没什么把握，完型很顺利，作文本来我也一般，语法题不会的比较多，但是不太在意了。希望英语上90。</p><p>就这样，煎熬的考试周在复习和考试中度过了，身处其中时感觉极其煎熬、焦虑、漫长，但是渡过了却觉得很快，感觉自己在这次考试中成长了，身体和心理的抗压能力都得到了提升。这次考试不知道是因为老师体谅延期考试压力极大而降低了难度并且透露了信息，还是我自己应试的能力提高了，也许两者都有吧，希望结果会好。一直忍着没查成绩，希望一下子查六门成绩会让我很惊喜吧，希望不要再次被打击。</p><p>既然考完试了，好好休息，好好运动，好好学英语，好好提升自己吧！</p>]]></content>
    
    
    <summary type="html">也许是目前为止人生中最煎熬的一周终于结束了！</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>科目二满分通过了耶！</title>
    <link href="https://43.143.214.130/2022/08/12/%E7%A7%91%E7%9B%AE%E4%BA%8C%E6%BB%A1%E5%88%86%E9%80%9A%E8%BF%87%E4%BA%86%E8%80%B6%EF%BC%81/"/>
    <id>https://43.143.214.130/2022/08/12/%E7%A7%91%E7%9B%AE%E4%BA%8C%E6%BB%A1%E5%88%86%E9%80%9A%E8%BF%87%E4%BA%86%E8%80%B6%EF%BC%81/</id>
    <published>2022-08-12T14:33:55.000Z</published>
    <updated>2022-08-13T15:33:56.995Z</updated>
    
    <content type="html"><![CDATA[<p>刚才数了一下科目二的练习时间，大概是15天。说不长也真不长，但是其实到最后几次练车就已经很熟练了，更多的就是为了确保稳过，所以理论上还是可以压缩的。侧方停车，坡道定点停车与起步，曲线行驶，直角转弯，倒车入库，对我来说侧方停车和倒车入库最简单，直角转弯会有些担心，曲线行驶还好，半坡最担心，主要是怕停车位置过于离谱。</p><p>其实科目二考试前还是蛮紧张的。紧张的原因算起来是四方面吧，最重要的是时间紧迫：我希望这个暑假拿到驾驶证，这样学车不用断开，寒假去上海也不用急着回来，如果想要暑假拿证，就一次考试都不能挂（同行的人挂了，他月底开学，只能争取假期考完科目二了，ps：挂科要<strong>十天之后才能预约</strong>）；其次是费用，每次去考试都得花几百块钱，我舍不得这个钱；再次就是实在不想再去训练场练科目二了，实际上没什么意义，而且耽误学习；最后就是为了自己的小面子，既然是考试嘛，就不能比别人差。所以考前稍微有点紧张，记得有时候做梦都在练科目二。</p><p>考前模拟交了260，总共就练了两把+半坡。前两把基本是满分过，教练就说让我别练了，练多了反而不好，所以主要是另外三个人练。自己也蛮有信心的，但是也会担心自己不练最后就我挂了。去沙县之前挺紧张的，去了沙县反而不紧张了。下午睡睡觉，学习一下。晚上约小魏出去散步。第二天早上自己慢悠悠地走去李记吃个早饭，再慢悠悠地走回去，感觉沙县我也熟悉了。</p><p>接着就是去候场考试了，等待的过程挺煎熬的。考试车是8号，起身的时候莫名产生了一种我肯定会过的自信（8&amp;24的魅力）。等到车来时，车停在了疯狂浇水的地方，前一个人很有礼貌说”不好意思，把车停在这里“。上车也没用到身份证，直接识别人脸了。调整了座椅，后视镜。用雨刮器刷掉水。这时候就是忘记了检查仪表盘和空调，空调呼呼作响，但是不热，让我产生了是驾校的风扇的错觉。</p><p>第一把开始考试，这一把不紧张。发现雨刮器的点没有，本来教练交代了这样的情况对喷水口，但是我太自以为是了，觉得新雨刮器上的那个点差不多，那个更容易观察。侧方停车没问题。结果坡道的时候，由于那个点偏左，我用那个点对中线，自然车身偏右，上坡的时候就压线了，不及格。完全没想到会这样挂。当时整个人就懵了，这时候半坡起步车动力就不足了，我以为是我自己的问题，实际上是空调没关。上去开了个曲线行驶和直角转弯保安就让我下去重考了。下去的时候看到黄星晨开完坡道上去，看起来很顺利（但是没想到两次都挂在曲线行驶上）。这时候心态有点小崩。不过还好及时意识到是点对错了，马上改成对喷水口。（还好我这么想了，如果以为是自己的问题，下一把必定挂）。</p><p>第二把看到侯晓敏也重考了，我就跟在她后面，感觉安心一点🤣。这一把整个人都有点慌张、懵逼。很害怕再挂了。侧方停车的时候，太早向左打死，距离左边线太近了，当时特别怕压线。一慌张，出侧方的时候差点忘记打转向灯了，还好及时醒悟。侧方停车顺利通过。接着开始半坡，对准点之后，旗杆也对得很准，没扣分。懵逼之下手刹之后回了空挡，模拟的时候这么干了，机器没扣分，但是教练说会不及格，我就一直交代自己别犯这个错误，但是当时人懵了，所以忘了。瞬间大脑一片空白，以为要挂了，但是没声音，看来是不扣分，我赶紧挂一挡，生怕机器说不合格。然后起步，一直怕超时，还好顺利起步了，但是因为开着空调，车动力不足，勉勉强强冲上坡，运气不好可能又挂了。上了坡，我就长舒一口气。接着曲线行驶顺利过。直角转弯差点压角了，险之又险。之后来到倒车入库，我很有信心。去了4号库，一右倒库起初一切顺利，但是停车位置有点偏后，也怕压线。左倒库一切正常。如释重负，开心地开走了。看见侯晓敏刚好倒完库出来，看来也过了，我高兴地朝她按了一下喇叭，不过她没发现。接着就是签字确认和离场了，我们都因为险过很开心。</p><p>平时练车和模拟都没碰上一点波折，没想到一次科目二碰到这么多惊险的点，不过最后满分通过还是很开心的。不辜负教练对我的信心，也没给自己丢脸。</p><p>感觉还是取决于平时吧，能满分通过一方面是连的多，另一方面是我平时练车就自己给自己模拟，每一趟都当考试来开。所以考试懵逼状态可以凭着肌肉记忆满分。我觉得自己很幸运，车的动力好，开着空调都冲上坡了，太感激了，不然后果太严重了。不过也许运气好就碰上正常雨刮器的车了呢，不过动力还是不足。</p><p>没想到自己第二把在紧张状态下能把离合器刹车踩得那么准，停车位置一分没扣，嘻嘻😀。</p><p>希望科目三继续一把过~</p>]]></content>
    
    
    <summary type="html">科目二有惊有险地通过了！</summary>
    
    
    
    <category term="生活的点点滴滴" scheme="https://43.143.214.130/categories/%E7%94%9F%E6%B4%BB%E7%9A%84%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4/"/>
    
    
    <category term="学车" scheme="https://43.143.214.130/tags/%E5%AD%A6%E8%BD%A6/"/>
    
  </entry>
  
</feed>
